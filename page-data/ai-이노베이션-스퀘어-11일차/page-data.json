{"componentChunkName":"component---src-templates-blog-post-js","path":"/ai-이노베이션-스퀘어-11일차/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"11일차\" style=\"position:relative;\">11일차<a href=\"#11%EC%9D%BC%EC%B0%A8\" aria-label=\"11일차 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>\n<p>오늘부터 mnist! 이게 플밍 Hello, World 격이라니...ㅋㅋㅋㅋㅋ</p>\n</li>\n<li>\n<p>지난 1주일을 보내며 회사에서 다른 고민을 갖게 됐다. IoT도 배우고 싶어지네.</p>\n</li>\n</ul>\n<p>일단 뭐든 계속 공부를 해야겠다. 특히, docker를 배워 봐야겠다. T academy 갔을 때 접한 이후로 할 생각을 못 했는데, 교수님 덕분에 드디어 공부해야 할 필요성을 느꼈다.</p>\n<h4 id=\"메모\" style=\"position:relative;\">메모<a href=\"#%EB%A9%94%EB%AA%A8\" aria-label=\"메모 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>★ over fitting - data split</li>\n<li>★ one-hot encoding</li>\n</ul>\n<hr>\n<h3 id=\"문제-풀이-시간에-배운-점-지난-주에-이어서\" style=\"position:relative;\">문제 풀이 시간에 배운 점 (지난 주에 이어서)<a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%90-%EC%A7%80%EB%82%9C-%EC%A3%BC%EC%97%90-%EC%9D%B4%EC%96%B4%EC%84%9C\" aria-label=\"문제 풀이 시간에 배운 점 지난 주에 이어서 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>​</p>\n<h4 id=\"예제9\" style=\"position:relative;\">예제9<a href=\"#%EC%98%88%EC%A0%9C9\" aria-label=\"예제9 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>파일에서 training data / test data를 원하는 비율만큼 자동 추출하는 법?</li>\n</ul>\n<p>실무에서는 training data/ test data / validation data 를 만들어내야 함.</p>\n<p>w,b 변화는 y 최소화를 위함인데, x,t는 고정된 값이니,\r\nw,b는 y 최소화가 되게 거기에 맞게 변화시킴<br>\n= x,t에 종속적이다 x,t에 가장 적합한 w,b 찾는 거니까<br>\n= w,b는 x,t에 최적화된다<br>\n=> 오버 피팅 영향을 받는다</p>\n<ul>\n<li>ML의 가장 큰 문제 : overfitting(과적합) : w,b가 특정 데이터 에만 최적화 돼 있다는 의미이다.</li>\n</ul>\n<p>\"how to reduce overfitting in ML\"<br>\nw,b는 어쩔 수 없이 종속적일 수 밖에 없으므로, prevent가 아닌 reduce라고 해야 맞다.  어떻게 줄일까? 많은 방법이 있는데, data split도 포함된다.\r\n​</p>\n<p>cf. 텐프 2.x - 케라스 강의<br>\ntrain data/validation data/test data<br>\n=> train data와 test data 분리가 필요하다. (over fitting 방지용)</p>\n<ul>\n<li>train data = 실제 학습 (반복) 시 사용되어 w,b update한다.</li>\n<li>test data = after learning 학습 후 최종적으로 정확도 확인할 때 쓴다.</li>\n<li>validation data = during learning 학습 도중 over fitting 되나 확인할 때 쓴다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">for 반복횟수 (epochs)  \r\n    for 전체data  \r\n       train data w,b update  \r\n    validation  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>cf. 텐플 강의 8 logistic regression example</p>\n<ul>\n<li>validation 정확도 올라가다 멈춤 &#x26; train 계속 올라감</li>\n</ul>\n<p>=> 이 차이가 over fitting !</p>\n<ul>\n<li>같이 올라가다 epochs 200에서 갈라진다</li>\n</ul>\n<p>=> 이러면 epochs는 200 이하면 되겠네,라고 생각해 보자. 갈라내기 시작한 부분을 찾는 게 point !</p>\n<ul>\n<li>train : test = 일반적으로 8:2 or 7:3 정도로 나눈다</li>\n</ul>\n<p>그리고 train 일부를 validation으로 또 나눈다 이거 또한 8:2 or 7:3 비율 정도면 ok</p>\n<p>data가 적으면 test data를 validation으로 사용하기도 한다<br>\n어차피 test가 학습에 쓰이지 않으니까.</p>\n<p>★ over fitting / data split ★</p>\n<p>​</p>\n<p>​</p>\n<p>during learning > investigate overfitting</p>\n<p>after learning > measure accuracy</p>\n<p>​</p>\n<p>​</p>\n<p>over fitting 문제 해결을 위해 split 해야하는데, data volume ↑ 이어야 한다, 이게 objective</p>\n<ul>\n<li>numpy.random.shuffle(…)\n<ul>\n<li>data split을 할 때 유용하며, list 아닌 numpy 상태에서 사용해야 한다.</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\r\nA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\nB <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\r\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>shuffle 시, 행 단위로 섞인다.​</li>\n</ul>\n<p>: 행 row ≒ record ≒ 학습데이터 단위<br>\n이렇게 데이터를 행단위로 섞어야 한다.</p>\n<p>원본 data가 바뀐다</p>\n<p>​</p>\n<p>cf. ※ random.shuffle()은 걍 아무거나 나오니까 이거 쓰면 안 된다.</p>\n<p>ML 시, split 비율 정하고, 이에 대한 shuffle해서 test data 뽑고, 나머지에서 training data와 validation data를 뽑는 순으로 진행하면 된다.</p>\n<ul>\n<li>DG class \"호출하는 쪽\"에서 exception 처리해야 한다.</li>\n</ul>\n<p>그래서 raise Exception(str(err))</p>\n<p>★ .generate()에서 에러가 발생할 수 있으니까, 여기서도 try exception …<br>\n실제 exception은 obj1 = datageneration ~이 아니라 class 니까<br>\n클래스 generate 안쪽에 추가해야 한다 ㅠ</p>\n<ul>\n<li>다양한 data 비율 로도 해보자</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>은닉층 노드가 동일하다고 가정하면, input data의 열이 많은 게 오래 걸린다.</p>\n<ul>\n<li>행 > batch_size = 1 (지금 짜는 코드는 for문 2개니까...)</li>\n<li>열 > nodes 수 -> 미분</li>\n</ul>\n</li>\n<li>\n<p>wine data는 정답 label 0이 훨씬 많다. 만약 5:995이면 거의 후자만 나올 거다.</p>\n</li>\n</ul>\n<p>그러니 ML 전 data science data preprocess 데이터 확인하자.</p>\n<ul>\n<li>\n<p>data distribution 확인 (특히, 정답의 분포) 후 data 정의 필요하다.</p>\n</li>\n<li>\n<p>numpy.unique(…)</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">A <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\nunique<span class=\"token punctuation\">,</span> counts <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> return_counts <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>unique<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unique<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>​\r\n=> unique한 값, cnt 수 쌍으로 return 한다.</p>\n<ul>\n<li>​데이터 비율을 강제로 5대 5로 만들 필요는 없다.</li>\n</ul>\n<p>0:1 이 15:85=> 15:15로 하면 학습량이 부족함...은 둘째치고,<br>\n각 20% 씩 때리는 게, data 조작을 하게 되는 셈이라 하지 말아야 한다.<br>\n(평점 별 3개가 1000명이었는데, 200명으로 만든 꼴...)\r\n​\r\n원본 데이터의 비율은 유지해야 한다<br>\n=> data contamination 오염 방지 차원에서.</p>\n<p>어떤 특정 bias에 오염되지 않은 fair data라는 가정하에 ML에서 학습시킬 때 써야 한다.​</p>\n<p>cf. 미래 ai의 핵심 > fairness ai</p>\n<p>8:2를 5:5로 만든다 자체가, manipulation 조작에 해당된다.<br>\n고로, 데이터 출처를 모른다면, 원본 그대로 써야 한다.<br>\n(bias가 드가니까 결과도 내가 원하는 대로 나올 수 밖에 없어서.)\r\n​</p>\n<p><strong>설령, 데이터 비율이 극단적이어도 원본 그대로 그렇게 써야 한다. 건드리는 거 자체가 오염이고, 조작이다.</strong></p>\n<p>generate 이후 데이터 분포를 보는 순서가 맞으므로, private method로 작성했다.\r\n__이렇게 순서가 반드시 필요한 건 private하게 만들어서 내부에서 self로 불러야 한다.__​</p>\n<p>cf. 순서가 있는 data 시계열 (주가 등) 현재 주가를 알려면 이전 주가들의 pattern을 알아야 한다. 여기도 private...</p>\n<ul>\n<li>...accuracy는 증가하는데 loss도 증가하면? w,b가 운 좋게 잘 맞은 특이한... 경우라고.</li>\n</ul>\n<p>​\r\ncf. early stopping 중간에 끊기<br>\ntrain valid 정확도 같이 오르다가, valid 정확도 떨어지는 시점에 끊어야 한다.</p>\n<hr>\n<p>(일배치든 뭐든 간에,) 데이터들이 칼럼이 같다는 건 행만 달라진다는 것이다.</p>\n<p>학습시키는 데이터가 비슷한지 증명하는 과정이 선행되고 나서 일단위로할 지, 주단위로할 지 등 insight를 보고 나서 decision making을 한 뒤 학습해야 한다.</p>\n<p>system architecture 관점에서 설게를 먼저 하자.</p>\n<hr>\n<h3 id=\"mnist-소개\" style=\"position:relative;\">MNIST 소개<a href=\"#mnist-%EC%86%8C%EA%B0%9C\" aria-label=\"mnist 소개 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>손글씨 dadta Set으로,<br>\n[0] 첫번째는 정답 값이고, 나머지는 [1:] 숫자 색상의 조합 (0~255 사이) 으로 구성돼 있다.</p>\n<p>cf. <a href=\"http://www.pjreddie.com/media/files/mnist_train.csv\">http://www.pjreddie.com/media/files/mnist_train.csv</a><br>\ncf. <a href=\"http://www.pjreddie.com/media/files/mnist_test.csv\">http://www.pjreddie.com/media/files/mnist_test.csv</a></p>\n<ul>\n<li>image의 range를 볼 때 > plt.colorbar()</li>\n<li>순수 이미지만 보이게> plt.axis('off')</li>\n</ul>\n<h4 id=\"one-hot-encoding\" style=\"position:relative;\">one-hot encoding<a href=\"#one-hot-encoding\" aria-label=\"one hot encoding permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>이전에 0,1 분류에 sigmoid를 썼는데, mnist는 정답의 종류가 0~9로 10가지가 있다.<br>\n=> 정답 10개를 어떻게 분류하지?</p>\n<p>정답 갯수만큼 출력노드를 만들고 (sigmoid 10개), 값이 가장 높은 값의 index를 정답으로 간주하는 방식을 쓰게 된다.<br>\n=> one hot encoding</p>\n<ul>\n<li>one-hot encoding이란? 필요한 이유는? activation function sigmoid는 변곡점이 하나라서 이거로는 mnist 값을 분류할 수 없다.</li>\n</ul>\n<p>​\r\n...큰 값을 가진 노드의 인덱스가 정답인 이유는 이게 정답이니까 그냥 정의다, 정의.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#11%EC%9D%BC%EC%B0%A8\">11일차</a></p>\n<ul>\n<li><a href=\"#%EB%A9%94%EB%AA%A8\">메모</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%90-%EC%A7%80%EB%82%9C-%EC%A3%BC%EC%97%90-%EC%9D%B4%EC%96%B4%EC%84%9C\">문제 풀이 시간에 배운 점 (지난 주에 이어서)</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%A0%9C9\">예제9</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mnist-%EC%86%8C%EA%B0%9C\">MNIST 소개</a></p>\n<ul>\n<li><a href=\"#one-hot-encoding\">one-hot encoding</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"AI 이노베이션 스퀘어 12기 기본반 11일차 후기"}}},"pageContext":{"slug":"/ai-이노베이션-스퀘어-11일차/"}},"staticQueryHashes":["3159585216"]}