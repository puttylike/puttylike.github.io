{"componentChunkName":"component---src-templates-blog-post-js","path":"/ai-이노베이션-스퀘어-4일차/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"4일차\" style=\"position:relative;\">4일차<a href=\"#4%EC%9D%BC%EC%B0%A8\" aria-label=\"4일차 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>금일 오전에는 오늘은 numpy에 대해 배웠다. 다음 강의는 10/10이다. 추석에 그동안 배운 걸 열심히 복습해야 나중에 혼란을 겪지 않을 거 같다. 말씀하시는 게 심상치 않다. 이렇게 공부하니 대학원 가고 싶어진다.</p>\n<h4 id=\"메모\" style=\"position:relative;\">메모<a href=\"#%EB%A9%94%EB%AA%A8\" aria-label=\"메모 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>중요 : exception 처리 / 객체 3대 특징 / c++은 완전한 oop가 아니다 / 행렬곱의 물리적 의미 insight</li>\n<li>\n<p>앞으로 배울 iterator = 미분에 활용된다.\n<br/></p>\n<hr>\n</li>\n</ul>\n<h3 id=\"1-문제-풀이-시간에-배운-점\" style=\"position:relative;\">1. 문제 풀이 시간에 배운 점<a href=\"#1-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%90\" aria-label=\"1 문제 풀이 시간에 배운 점 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>(1) 예제1 - 객체지향프로그래밍 OOP 3대 특징</p>\n<ol>\n<li>캡슐화 : class를 만들어서 외부로부터 보관할 data를 보호한다 - information hiding 데이터 은닉<br/></li>\n<li>상속 : extends<br/></li>\n<li>다형성 : 함수 이름은 같고 파라미터가 다른 거<br/></li>\n</ol>\n<p>cf. JAVA : OOP / C++ : OOP 아님 (캡슐화 X)</p>\n<ul>\n<li>Java : 객체는 내가 못 죽이고 virtual machine이 지움 (Garbage Collection)</li>\n<li>C++ : 포인터가 있음. A를 가리키는 포인터가 존재한다</li>\n</ul>\n<p>ex. C++<br/>\nMyTest* ptr = &#x26;A    <br/>\n=> 포인터가 있다는 건, ptr이 가르키는 걸 지울 수 있다는 의미다.ex.\n=> 포인터를 통해 (포인터를 지우면) 객체를 지울 수 있다. 캡슐화라 할 수 없다. 그래서 encapsulation을 만족하지 않는다. 이는 pointer 때문이다.<br/>\n=> OOP인 척할 뿐... ㅇㅇ</p>\n<p>cf. 윈도우 블루 스크린 :</p>\n<ul>\n<li>구 윈도우 OS : visual C++ UI interface => pointer 존재해서 그랬던 것</li>\n<li>요즘 윈도우 OS : .NET   C# => pointer (X)</li>\n</ul>\n<p>(2) 예제3 : 실수 주의<br/>\nclass MyTest: <br/>\ndef hello(self) <br/>\n=> MyTest 내부 메소드에는 반드시 self가 반드시 있어야한다.</p>\n<p>(3) 예제2 : 입력받는다 = 저장한다 = 클래스 내부에 보관한다</p>\n<p>cf. 윈도우 마우스 - 현재좌표만 갖고 있으면 화살표를 display만 해주면 되는 것..</p>\n<p>cf. 객체는 class로 부터 만들어지는데, 객체는 눈에 보이는 모든 것이다.\nex) 나는 그녀를 만나서 이야기하고, 식사를 vips에서 함께 했다.<br/>\n=> 동사 -> method &#x26; 나/그녀 -> class person</p>\n<p>(4) 예제4<br/>\nobj.devide() 결과가 실수 / null 나오는 건 코드 일관성이 깨짐 code consistency 위반\n=> 이게 아니라 되든가 안되든가해야지...</p>\n<p>​</p>\n<p>def divide(self):\ndiv = 0\ntry: div = self.x / self.y\nexcept Exception as err:\nprint('0으로 나누지마세요')\nreturn div\n=> code consistency 측면에서 ok / code accuracy 측면에서 별로.\n=> return div 하면 => 0/ 10과 구분이 안 된다</p>\n<p>​\ndef divide(self):\ntry: if self.v2 == 0:\nraise Exception('divide impossible')\nelse: return self.v1 / self.v2\nexcept Exception as err:\nprint(str(err))\n=> return의 부재\n=> class 는 user defined data type이다.\n여기선 exception이 발생할 때마다 class가 변경되어야 함...\n=> 클래스 내부에서는 exception 처리하지 않는다.</p>\n<p>​\nreturn이 분리돼 있으면 항상 값을 확인해 줘야함<br/>\ndef 안에 exception 처리하면 class 컴파일 다시 하고... 계속 그 클래스 쓰는 애들도 다 바꿔줘야 함 ;\n부르는 쪽 caller에서 exception 처리 필요. obj는 exception을 던질 뿐ㅇㅇ</p>\n<p>​\nclient app만 변경 / data class는 x</p>\n<p>​\n(5) 예제5. java file 읽기 - main에서 진행.<br/>\ncf. <a href=\"https://docs.oracle.com/javase/10/docs/api/index.html?java/io/FileReader.html\">https://docs.oracle.com/javase/10/docs/api/index.html?java/io/FileReader.html</a>\n파일에서 에러 던져 쥼 (throws) => 그러니 사용자는 try catch로 잡으면 된다.</p>\n<p><b>with 안 하면 실행 중 exception 발생 시 close 할 수가 없으니까 써줘야 한다.</b>with 구문을 쓰는게 좋지만 만약 안 쓰고 싶다면 finally에 close를 쓰면 동일하다고 보면 되는데, exception 여부에 상관없이 늘 실행되는 거라... with을 쓰자. 파일이 없어 open 이 안 됐는데 finally close() 하면 에러 위험 요소가 있어서 권장하진 않는다.</p>\n<hr>\n<h3 id=\"2-numpy\" style=\"position:relative;\">2. numpy<a href=\"#2-numpy\" aria-label=\"2 numpy permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>​cf. 벡터 1차원 / 행렬 2차원 / 3차원 이상은 tensor<br/>\ncf. tensorflow tensor를 흘려보내서 데이터처리한다</p>\n<p>100101010... 이미지는 행렬.. 정확히 말하면 tensor로 표현할 수 있다</p>\n<p>cf. 정답=target=label , 나머지들\n5,               [ 28*28 ] => rgb 0~255 사이 숫자가 784개</p>\n<p>cf. numpy는 이런 방식을 쓴다.  </p>\n<pre><code>import numpy as np\nA = np.array([1,2])\nprint(\"A == \",A,\", type ==\",type(A))\n</code></pre>\n<p>(1) 행렬 만들기 : np.array( 리스트 )</p>\n<ul>\n<li>연산(계산)이 필요하면 numpy를 써야 한다.</li>\n<li>numpy 쓸 땐 for 쓸 일이 거진 없다.\ncf. 함수 return 시 type을 썼는데, numpy의 형상을 알기 위해 .shape 을 자주 쓰게 된다.</li>\n</ul>\n<p>​(2) 형태 : .shape()<br/>\nex. A.shape (3,) => element가 3개인 벡터이다.</p>\n<p>​(3) 변형 : A.reshape()<br/>\nvector를 matrix로 바꾸거나 matrix를 다른 형상의 matrix로 변경할 때 사용한다.</p>\n<p>cf. 가상화   virtulization\n10G 5명 나눠쓰기 4G (per 1인)<br/></p>\n<ul>\n<li>인당 2G 이면 user preference<br/></li>\n<li>누군가 4G를 쓰면 나머지 6G를 나눠 써야 함<br/>\n=> 물리적인 기준 10G를 넘어갈 수 없음</li>\n</ul>\n<p>​ex. A.shape : (3,4) 일 때</p>\n<ul>\n<li>reshape(-1, 3) => -1이 나오면 행은 상관없고 열을 3열로 맞추라는 의미<br/> => (3,4) => (4,3)</li>\n<li>reshape(-1,6)  => (2,6)</li>\n</ul>\n<p>cf. (3,3,64) 3x3이 64개 => (-1,8) 가능</p>\n<ul>\n<li><b>tensor이면 높이, 행렬이면 열 기준으로 맞추라는 의미</b></li>\n</ul>\n<p>​(4) numpy broadcast<br/>\n사칙연산에 한해, 크기가 작은 쪽이 큰 쪽으로 커진다.\n이 기능을 활용해 ML에서 linear regression 등이 쉽게 가능해 지며, 덕분에 수식을 직관적으로 표현할 수 있게 된다.<br/></p>\n<p>ex. A + 5 => 문법적으로 가능하다.<br/></p>\n<p>​(5) 행렬 곱 dot product : .dot(A, B)\n앞 행렬의 열과 뒷 행렬의 행이 같아야 곱이 된다.\n행렬 곱에서는 broad cast가 불가하다.</p>\n<p>cf. MATMUL : matmul matrixmultiplication 비슷하다.\n​\ncf. 행렬 곱 해야 하는 이유... insight ...?</p>\n<ul>\n<li>곱셈 : 입력 데이터의 변형</li>\n<li>덧셈 : 평균에 대한 물리적 의미 함유</li>\n</ul>\n<p>=> 입력데이터의 변화에 평균값을 준다<br/></p>\n<p>=> <b> 행렬 곱이란 입력 데이터에 평균적으로 얼마 만큼의 변형을 주는지 알고 싶을 때 쓰는 것이다.</b></p>\n<p>cf. A*B A는 입력 B는 filter</p>\n<p>cf. convolution filter : 입력 데이터의 변화를 준 것의 평균값\ncf. <a href=\"https://en.wikipedia.org/wiki/Kernel_(image_processing\">https://en.wikipedia.org/wiki/Kernel_(image_processing</a>)</p>\n<p>\"filter - blurring original data\"\nblurring, sharpening...  = image transform의 subset</p>\n<p>t에 대한 함수 => t 시간적으로 이동시키며 행렬 곱 하는 것 ; convolution</p>\n<p>cf. 포토샵 - 필터 = 행렬​</p>\n<p>(6)​ transpose 전치행렬 = 행렬 변환<br/>\nvector는 transpose 가 안 된다. 그래서 reshape 로 행렬로 바꿔서 해야 한다.</p>\n<hr>\n<h3 id=\"3-문제-풀이-시간에-배운-점2\" style=\"position:relative;\">3. 문제 풀이 시간에 배운 점2<a href=\"#3-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%902\" aria-label=\"3 문제 풀이 시간에 배운 점2 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>(1) 예제1.<br/>\n1 - A 이런 표현에 놀랄 필요 없다. broadcast이다.</p>\n<p>(2) 예제3. <br/></p>\n<ul>\n<li>사칙연산은 shape이 같아야 한다.</li>\n<li>broadcast 쓰려면 dim이 달라야 한다.</li>\n<li>np.dot 벡터와 행렬, 행렬곱 가능할 때 있다.</li>\n<li>백터를 행렬로 바꿔도 shape이 안 맞으면 결국 에러다.</li>\n<li><b>벡터는 행과 열을 구분하지 않는다. 그래서 연산 시 행이 될 수도 열이 될 수도 있다</b></li>\n</ul>\n<p>A = np.array([10,20,30,40,50,60]).reshape(3,2)\nprint(A[:,0].shape)\nprint(A[:,0]) # vector</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-4%EC%9D%BC%EC%B0%A8/#4%EC%9D%BC%EC%B0%A8\">4일차</a></p>\n<ul>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-4%EC%9D%BC%EC%B0%A8/#%EB%A9%94%EB%AA%A8\">메모</a></li>\n</ul>\n</li>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-4%EC%9D%BC%EC%B0%A8/#1-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%90\">1. 문제 풀이 시간에 배운 점</a></li>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-4%EC%9D%BC%EC%B0%A8/#2-numpy\">2. numpy</a></li>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-4%EC%9D%BC%EC%B0%A8/#3-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%902\">3. 문제 풀이 시간에 배운 점2</a></li>\n</ul>","frontmatter":{"title":"AI 이노베이션 스퀘어 12기 기본반 4일차 후기"}}},"pageContext":{"slug":"/ai-이노베이션-스퀘어-4일차/"}},"staticQueryHashes":["3159585216"]}