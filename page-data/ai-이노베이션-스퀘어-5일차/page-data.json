{"componentChunkName":"component---src-templates-blog-post-js","path":"/ai-이노베이션-스퀘어-5일차/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"5일차\" style=\"position:relative;\">5일차<a href=\"#5%EC%9D%BC%EC%B0%A8\" aria-label=\"5일차 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>2주 만에 듣는 강의. 금일 오전에는 numpy &#x26; matplotlib에 대해 배웠다. 그리고 오후에는 미분에 대해 배웠다. n년 만에 하는 수학에 설렌다(?). chain rule이 좀 어색하긴 하지만 ㅎㅎ...</p>\n<h4 id=\"메모\" style=\"position:relative;\">메모<a href=\"#%EB%A9%94%EB%AA%A8\" aria-label=\"메모 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>데이터 관점에서 더하기, 곱하기 물리적 의미 => 행렬곱/적분/컨볼루션 연산</li>\n<li>미분 insight</li>\n<li>chain rule insight</li>\n</ul>\n<hr>\n<h3 id=\"1-numpy---2\" style=\"position:relative;\">1. numpy - 2<a href=\"#1-numpy---2\" aria-label=\"1 numpy   2 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>아키텍처 보는 법 => 어차피 결국 +와 *의 조합인 구조일 뿐.\n결국, ML이란 그 값에 영향을 미치는 부분을 학습시키는 것.</li>\n</ul>\n<p>(1) iterator\nn x m 행렬 값 1개씩 가져오고 싶을 때 사용한다. cf. C++, java iterator랑 동일하다.<br>\n=> ML에서 많이 쓰인다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">A <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 행렬 A의 iterator 생성</span>\nIt <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nditer<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'multi_index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> op_flags<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'readwrite'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> It<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">:</span>\n  idx <span class=\"token operator\">=</span> It<span class=\"token punctuation\">.</span>multi_index\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index == \"</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span><span class=\"token string\">\" type[idx] == \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" value == \"</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  It<span class=\"token punctuation\">.</span>iternext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>첫 번째 원소를 가리키는 객체 it<br>\n(행,열)이면 flgas가 multi<em>index 고정<br>\nop</em>flags reatwrite 가져와서 읽고 쓰고 할 때 사용<br>\nwhile not it finished: idx 인덱스<br>\n.iternext() 까지  </p>\n<p>=> 이걸 이해 해야 파이썬 수치해석 미분 코드 이해 가능하다.</p>\n<p>​(2) numpy useful functions</p>\n<ol>\n<li>np.loadtxt() => loadtxt 파일 읽어서 행렬로 return한다.<br>\npd.read_csv 의 return은 dataframe이라 np.loadtxt를 쓰는 편이다.  </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># dtype은 생략 시 float이 기본이다.</span>\nloaded_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span><span class=\"token string\">'./data-01.csv'</span><span class=\"token punctuation\">,</span>delimiter<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loaded_data.shape() == \"</span><span class=\"token punctuation\">,</span> loaded_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\nx_data <span class=\"token operator\">=</span> loaded_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nt_data <span class=\"token operator\">=</span> loaded_data<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 데이터 차원 및 shape 확인</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x_data.ndim = \"</span><span class=\"token punctuation\">,</span> x_data<span class=\"token punctuation\">.</span>ndim<span class=\"token punctuation\">,</span> <span class=\"token string\">\" , x_data.shape = \"</span><span class=\"token punctuation\">,</span> x_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x_data.ndim = \"</span><span class=\"token punctuation\">,</span> t_data<span class=\"token punctuation\">.</span>ndim<span class=\"token punctuation\">,</span> <span class=\"token string\">\" , t_data.shape = \"</span><span class=\"token punctuation\">,</span> t_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>cf. 오차역전파할 때 실수할 수 있다<br>\n=> 벡터는 .T transpose가 안 되니까 주의!  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">loaded_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># (25,) vector</span>\nloaded_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 마지막을 껍데기로 감싸서 뽑아라 # (25,1) 행렬</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>​2. 난수 생성 - rand(), randn() => ML에서 자주 쓴다  </p>\n<ul>\n<li>rand() : 0~1 사이 균일 분포에서 난수 생성</li>\n<li>randn() : 가우시안 표준정규분포에서 -1~1 사이 난수 발생 (randn의 n은 normal)</li>\n</ul>\n<p>cf. tf에도 똑같이 rand, randn이 있다.\ncf. 딥러닝 전까지 rand를 쓰다가 어떤 문제점이 발견되어서 randn으로 넘어갈 예정</p>\n<ol start=\"3\">\n<li>np.max / np.min / np.argmax / np.argmin</li>\n<li>argmax : 최대값의 index 를 return 한다<br>\n=> one-hot encoding 알고리즘 사용 시 유용하다<br>\n​\n행렬일 때는 axis로 기준을 부여한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">​np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># axis=0 : 열기준 / axis=1 : 행기준</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>numpy에서 sum 구할 때 np.sum을 써야 한다. for문으로 하면 너무 느리다. np.sum에 for문이 들어 있다.</li>\n</ul>\n<hr>\n<h3 id=\"2-문제-풀이-시간에-배운-점\" style=\"position:relative;\">2. 문제 풀이 시간에 배운 점<a href=\"#2-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%90\" aria-label=\"2 문제 풀이 시간에 배운 점 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>예제2.1 : iterator은 형태상관없는데, index로 하면 차원에 따라 다르게 코딩해야 한다.</p>\n<p>예제2-2 : reshape(-1, => 마지막 차원인 열에 맞추기.</p>\n<p>예제2-3. 수치해석 : 예외사항 발생 시 오차를 감안해서 수학적 문제를 컴퓨터로 푸는 것</p>\n<p>​___</p>\n<h3 id=\"3-matplot\" style=\"position:relative;\">3. matplot<a href=\"#3-matplot\" aria-label=\"3 matplot permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이 라이브러리는 그래프 그릴 때 사용하는데, 보통 데이터 형태 보려고 쓴다.</p>\n<ul>\n<li>​scatter</li>\n<li>float</li>\n<li>imshow (img 띄울 때)</li>\n</ul>\n<p>​cf. x = np.arange(0,15,0.1) 처음부터 여기까지 0.1 단위라 만든다</p>\n<p>​___</p>\n<h3 id=\"4-미분\" style=\"position:relative;\">4. 미분<a href=\"#4-%EB%AF%B8%EB%B6%84\" aria-label=\"4 미분 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"1-미분이란-미분은-왜-쓰는가\" style=\"position:relative;\">(1) 미분이란? 미분은 왜 쓰는가?<a href=\"#1-%EB%AF%B8%EB%B6%84%EC%9D%B4%EB%9E%80-%EB%AF%B8%EB%B6%84%EC%9D%80-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B0%80\" aria-label=\"1 미분이란 미분은 왜 쓰는가 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>미분으로 얻을 수 있는 insight? <strong>입력의 변화에 대한 출력의 변화</strong>  </p>\n<p>출력의 변화량 / 입력의 변화량 => 입력이 변할 때 출력이 얼마나 변하나\nlim delta_x->0 x가 미세하게 변한다</p>\n<p>==> 미분 이란 ?<br>\n<strong>입력을 아주 미세하게 변화시킬 때 출력이 얼마나 변하는지 알고자 할 때 사용한다.<br>\n= 출력이 입력의 미세한 변화에 얼마나 민감하게 반응하는지 볼 때 사용한다.</strong></p>\n<p>(2) 미분 기초함수</p>\n<ol>\n<li>f(x)=c(상수) => f'(x0=0 입력에 변화를 줘도 출력의 변화가 없다  </li>\n<li>f(x)=e^x => f'(x)=e^x  </li>\n<li>f(x)=ax^n => f'(x)=n<em>a</em>x^(n-1)  </li>\n</ol>\n<p>(3) 수치미분 1차 버전 – numerical derivative<br>\nx 기준으로 +delta,-delta하는게 수치해석 적으로 오차가 적게 나오는게 입증되어 코딩 시 <strong>주로 lim ( f(x+deltax)-f(x-deltax) ) / 2deltax</strong> 를 쓴다.</p>\n<p>cf. x는 어떤 수를 대표하는 값일 뿐이다. (f'(x) = 2*x) 수치해석에 숫자 무한히 넣으면 대수방정식이 나온다. 특정 값에 대한 미분 결과가 어떤 수식의 형태가 아닌 값이 나오는 것에 의문을 가질 이유는 없다.</p>\n<ul>\n<li>x 어떤 값을 기준으로 조금 증가하거나 감소시켰을 때 delta 출력값이 어떻게 변하나.. => 미분</li>\n</ul>\n<p>(4) 편미분 – partial derivative<br>\n출력에 영향 미치는 입력이 여럿 있는데, 나머지 입력은 변하지 않는다고 가정하고 하나의 변수로 미분하는 것을 말한다.\n​\ncf. 다변수 함수 = 출력에 영향 미치는 입력이 여럿</p>\n<p>cf. 그런데 입력 하나가 다른 입력에 영향을 줄 수도 있다.<br>\nex) 날씨(온도, 습도, ...)= 온도 -> 습도 ...\n온도 -> 습도 100% 종속적이면 편미분 불가능하나 이 경우는 반례가 존재한다. (동남아, 아프리카... )</p>\n<ul>\n<li>__ 이렇게 단 하나의 반례만 존재해도 수학적으로 독립적이라 가정하다.</li>\n<li>체중함수(야식,운동) => a체중/a운동 => 현재 운동을 하고 있어야 편미분할 수 있는 것</li>\n</ul>\n<hr>\n<p>(5) 연쇄법칙 – chain rule : 합성함수를 여러 <strong>기본</strong> 함수로 나누는 것이다.</p>\n<ul>\n<li>chain rule 관점에서 본 시스템 안정성?<br>\n특정 변화량이 크면 수정해야 하는 게, 결국 DL에서 할 일.</li>\n</ul>\n<p>cf. 전기가 급격히 오르면 퓨즈가 끊어버림</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-5%EC%9D%BC%EC%B0%A8/#5%EC%9D%BC%EC%B0%A8\">5일차</a></p>\n<ul>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-5%EC%9D%BC%EC%B0%A8/#%EB%A9%94%EB%AA%A8\">메모</a></li>\n</ul>\n</li>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-5%EC%9D%BC%EC%B0%A8/#1-numpy---2\">1. numpy - 2</a></li>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-5%EC%9D%BC%EC%B0%A8/#2-%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4-%EC%8B%9C%EA%B0%84%EC%97%90-%EB%B0%B0%EC%9A%B4-%EC%A0%90\">2. 문제 풀이 시간에 배운 점</a></li>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-5%EC%9D%BC%EC%B0%A8/#3-matplot\">3. matplot</a></li>\n<li>\n<p><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-5%EC%9D%BC%EC%B0%A8/#4-%EB%AF%B8%EB%B6%84\">4. 미분</a></p>\n<ul>\n<li><a href=\"/ai-%EC%9D%B4%EB%85%B8%EB%B2%A0%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%80%98%EC%96%B4-5%EC%9D%BC%EC%B0%A8/#1-%EB%AF%B8%EB%B6%84%EC%9D%B4%EB%9E%80-%EB%AF%B8%EB%B6%84%EC%9D%80-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B0%80\">(1) 미분이란? 미분은 왜 쓰는가?</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"AI 이노베이션 스퀘어 12기 기본반 5일차 후기"}}},"pageContext":{"slug":"/ai-이노베이션-스퀘어-5일차/"}},"staticQueryHashes":[]}