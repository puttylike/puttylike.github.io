{"componentChunkName":"component---src-templates-blog-post-js","path":"/oracle-sql-정규식으로-이름-컬럼-데이터-클렌징-하기/","result":{"data":{"markdownRemark":{"html":"<p>모 테이블에 이름이 들어가는 컬럼인데, 필수값 설정도 안 돼 있고 그렇다고 값 입력 받을 때 한글만 또는 영문만 제대로 입력하게끔 화면에서 제어하는 로직은 또 없었나 보다. 그렇다고 이게 뭔가 되게 중요한 정보로 잘 관리가 되던 거도 아닌 거 같다. 그래서 오류율이 상당히 높았다.</p>\n<p>오라클 DB에 맞게 sql 정규식을 활용해서 쉬운 순서대로 update 쿼리를 작성했으며, 누가 봐도 ㅣ를 ;로 쓴 거 같은 오타는 건 별로 수정했다.</p>\n<hr>\n<p>클렌징 진행 순서는 다음과 같았다.</p>\n<ol>\n<li>\n<p>공란인 경우  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> TRIM<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">)</span> <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 알 수 없음으로 데이터 수정  </p>\n</li>\n<li>\n<p>숫자만 있는 경우  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_LIKE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'^[0-9]*$'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 알 수 없음으로 데이터 수정  </p>\n</li>\n<li>\n<p>공백+숫자만 있는 경우  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_LIKE<span class=\"token punctuation\">(</span>TRIM<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'^[0-9]*$'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 알 수 없음으로 데이터 수정  </p>\n</li>\n<li>\n<p>특수문자 포함 건 중 특수문자 제거 시 숫자만 있는 경우  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_LIKE<span class=\"token punctuation\">(</span>TRIM<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'[[:PUNCT:]]'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>REGEXP_LIKE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'^[0-9]*$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'[[:PUNCT]]'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 알 수 없음으로 데이터 수정  </p>\n</li>\n<li>\n<p>나머지 건들 중 공백 있는 건 (이름 앞에 공백 있는 건이 주로 많았음)  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> TRIM<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;></span> NM</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 다행히 데이터가 전부 이름이어서 공백 제거  </p>\n</li>\n<li>\n<p>특수문자만 있는 경우  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_LIKE<span class=\"token punctuation\">(</span>TRIM<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'^[[:PUNCT:]]*$'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 알 수 없음으로 데이터 수정  </p>\n</li>\n<li>\n<p>특수문자 포함 시 한글이 3글자 이상 포함되는 경우  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[[:PUNCT:]]'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">AND</span> REGEXP_LIKE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[가-힣]{3}'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>=> 정규식으로 특수문자 제거 시 데이터가 어떻게 보이는지에 따라 다르게 처리했다.<br>\n** 이름으로 보이는 건은(오타 추정) 확인하여 건별로 이름 수정<br>\n** 이름 여러개 이면 수정 보류<br>\n** 특수문자 제거 시 온전한 한글의 형태이면 (=나머지) 그렇게 보이도록 데이터 수정  </p>\n</li>\n<li>\n<p>특수문자 ? 포함 건  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[[:PUNCT:]]'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">AND</span> NM <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%?%'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>=> 이름 식별이 안 돼 알 수 없음으로 데이터 수정  </p>\n</li>\n<li>\n<p>특수문자 ` 포함 건  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[[:PUNCT:]]'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">AND</span> NM <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%`%'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>=> 이름으로 보이는 경우 특수문자만 제거<br>\n=> 2건은 이름 식별 안 돼 알 수 없음으로 데이터 수정<br>\n특수문자 많은 건들은 이 2개 포함된 게 많아서 이렇게 진행했다.  </p>\n</li>\n<li>\n<p>자음 ㄱ~ㅎ 2개 이상인 건  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[ㄱ-ㅎㅏ-ㅣ]{2}'</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 김을 ㄱㅁ으로 쓰는 경우가 생각보다 좀 있었다<br>\n** 이름이 정확히 식별되는 건 건별로 확인 후 수정<br>\n** 이름 3글자가 온전한 경우에는 자음 제거\n** 나머지 알 수 없음을 데이터 수정  </p>\n</li>\n<li>\n<p>나머지 건들 중 숫자 포함되는 건  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[[:DIGIT:]]'</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>=> 해당 컬럼에 사람 이름이 들어가야 하는데, 사람 이름이 아닌 게 있었다.<br>\n** 기관이나 업체명이 들어가는 경우 수정 보류<br>\n=> 동명이인을 구별한답시고 입력자가 이름 옆에 1,2 아니면 A,B,C 를 붙인 경우의 데이터도 포함돼 있었다.<br>\n** 이런 경우 사람 이름만 남게 데이터 수정 (관련 고유식별번호 컬럼이 해당 테이블에 따로 있기 때문이다)<br>\n--- 여기까지, 숫자 포함 된 데이터 클렌징 완료 ---  </p>\n</li>\n<li>\n<p>기타 특수문자 포함 건<br>\n=> ㄱ-ㅎ, ㅏ-ㅣ, 특수문자 제거 시의 글자 길이에 따라 구분해봤다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>REGEXP_REPLACE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[[:PUNCT:]]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'[ㄱ-ㅎㅏ-ㅣ]'</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>** 이름이 여러개 적히거나 업체명, 기관명인 경우에는 수정 보류\n** 글자 길이 2이하가 되는 경우, 알 수 없음으로 수정<br>\n** 사람 이름인 경우, 이름으로 수정\n** 나머지 8건 : 건별로 확인 후 수정  </p>\n</li>\n<li>\n<p>한글 + 알파벳인 경우  </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> REGEXP_REPLACE<span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">,</span><span class=\"token string\">'[a-zA-Z]'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>** 이름이 보이면 이름으로, 업체명 같은 건 수정 보류\n** 그외 식별 불가한 경우 알 수 없음으로 데이터 수정</p>\n</li>\n<li>알파벳만 있는데, 글자 길이 2이하인 경우<br>\n=> 알 수 없음으로 수정  </li>\n<li>알파벳은 건드리기 애매해서 보류했다. (...)  </li>\n</ol>\n<hr>\n<p>데이터를 일괄적으로 알 수 없다고 표기하는 건 좀 아닌 거 같아서 최대한 살릴 수 있는 데이터는 살려 보았다. 개명하면 그만 아니냐, 라고 말하던 사람도 있었지만, 데이터 유실률이 좀 아깝게 느껴졌다.<br>\n화면 쪽 로직이 수정되었으니, 앞으로는 잘 관리될 거 같다. 이게 다른 업무 쪽에서도 쓰이기도 하고, 필요성이 더 증대될 수 있는 데이터라고 해서 노력해 봤다.</p>\n<p>테스트 DB에서 조회 및 수정 확인까지 다 하다 보니 4시간 정도 소요됐다. 이후, 담당자에게 엑셀로 정리하여 확인 요청을 드렸다. 두근두근 하다. 대체 이게 몇 건이지 싶고... ㅠ 필수값이 아니면 사람들은 화면에서 값을 입력하는 게 너무 귀찮은가 보다. 그런 바쁜(...) 상황은 이해하지만, 데이터 관리 및 활용을 위해 더욱더 제어 로직을 잘 심어줘야 된다는 생각이 들었다.</p>","tableOfContents":"","frontmatter":{"title":"데이터 클렌징 작업 - 이름 컬럼 (by SQL 정규식)"}}},"pageContext":{"slug":"/oracle-sql-정규식으로-이름-컬럼-데이터-클렌징-하기/"}},"staticQueryHashes":[]}