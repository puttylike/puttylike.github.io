{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/ai-이노베이션-스퀘어-13일차/",
    "result": {"data":{"markdownRemark":{"html":"<h3 id=\"13일차\" style=\"position:relative;\">13일차<a href=\"#13%EC%9D%BC%EC%B0%A8\" aria-label=\"13일차 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>\n<p>오차 역전파를 배웠다. 직접 공식을 하나 하나 유도하는 건 이번이 처음이었다. ... 교수님 강의 스타일이 정말 좋다.</p>\n</li>\n<li>\n<p>내일은 컴퓨터는 어떻게 정답을 예측했을까 debugging을 통해 정보를 출력한다거나, 오답을 확인하는 시간을 갖는다. 그리고 다음 주에는 드디어 tensor flow를 쓰고, kaggle 타이타닉 문제를 다룰 예정이라고.</p>\n</li>\n<li>\n<p>기존 게시물들에 source code를 조금씩 보완할 예정이다. 드디어 야근 빈도가 줄어 들었다. 다시 휴가를 쓸 수 있게 됐다...!</p>\n</li>\n</ul>\n<h4 id=\"메모\" style=\"position:relative;\">메모<a href=\"#%EB%A9%94%EB%AA%A8\" aria-label=\"메모 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>입력 데이터 정규화 &#x26; technic</li>\n</ul>\n<hr>\n<p>​\r\n수치 미분numerical deriatvie 을 하며 나름 dynamic style을 적용해 봤으나, 그럼에도 mnist에선 W와 b 업데이트할 때는 긴 시간이 소요되었다.</p>\n<p>​diabetes는 텍스트라 입력층 노드 8개지만, mnist는 이미지라 28*28개다.\r\n미분 자체가 나누기를 포함하고 있어, mnist 데이터 하나에 대해 5만번은 계산하게 된다. 그래서 속도가 상당히 느렸다.</p>\n<p><del>​cf. 나누기 - cpu내부 FPU가 별도로 필요해서 부담이 된다.</del></p>\n<hr>\n<h3 id=\"1-오차역전파\" style=\"position:relative;\">1. 오차역전파<a href=\"#1-%EC%98%A4%EC%B0%A8%EC%97%AD%EC%A0%84%ED%8C%8C\" aria-label=\"1 오차역전파 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li><strong>개념 및 동작원리</strong></li>\n</ol>\n<p>편미분을 체인 룰 chain rule로 국소 local 미분으로 분리해서 수학 공식으로 표현해 계산하는 방법</p>\n<p>$$W^2 = W^2 - α(∂E/∂W^2)$$  (α : learning rate)</p>\n<ul>\n<li>위 수식은...\n<ul>\n<li>$$E = A3-T$$, $$A^3$$가 변하면 $$E$$가 변한다. => $$∂E/∂A^3$$</li>\n<li>$$A^2$$가 변하면 $$A^3$$가 변한다 => $$∂A^3/∂A^2$$</li>\n<li>$$W^2$$가 변하면 $$A^2$$가 변한다 => $$∂A^2/∂W^2$$</li>\n</ul>\n</li>\n</ul>\n<p>​\r\n=> 미분을 어떤 공식의 곱하기들로 표현하면, 속도가 빨라지지 않을까?</p>\n<p>오차역전파를 한다고 해서 오차가 거꾸로 가는 건 아니다. 그냥 개념일 뿐...</p>\n<ul>\n<li>오차역전파 구현 순서\n<ul>\n<li>각 층에서의 z, a 수식으로 표현</li>\n<li>W, b는 모두 matrix로 표현</li>\n<li>$$E = ∑ Ei $$ (MSE)</li>\n</ul>\n</li>\n</ul>\n<p>=> $$∂E/∂W$$ 이런 거로 $$A<em>B</em>C*D$$ 이런 형태로 표현할 거다.</p>\n<ul>\n<li>각 층의 선형회귀 값 (z) / 각층의 출력 값 (a) 구하기</li>\n</ul>\n<p>: 각각의 층에서 선형회귀 값 z과 출력값 a을 구한다</p>\n<ul>\n<li>$$E = E1 + E2$$ , $$E1$$에 영향을 주는 $$a_1^3$$과 $$E_2$$는 별개니까</li>\n<li>입력층에는 가중치가 적용되지 않는다.<br>\n입력층 출력 값 => $$a_1^1 = x_1$$, $$a_2^1 = x_2$$</li>\n<li>은닉층 선형 회귀 값 => $$z_1^2 = a_1^1<em>w_11^2 + a_2^1</em>w_12^2 + b_1^2$$,\r\n$$z_2^2 = a_1^1<em>w_21^2 + a_2^1</em>w_22^2 + b_2^2$$</li>\n<li>은닉층 출력 값 => $$a_1^2 = sigmoid(z_1^2)$$, $$a_2^2 = sigmoid(z_2^2)$$</li>\n</ul>\n<p>​</p>\n<p>cf. MSE나 Cross Entropy나 똑같은데, 후자가 더 정확도가 높을 뿐이라, 여기서는 MSE + sigmoid로 오차역전파 공식을 유도한다. 행렬로 정리하며, 여기서 은닉층은 1개로 본다.</p>\n<p>cf. $$f = sigmoid$$ 이면, 미분 시, $$f' = f ( 1 - f )$$ 이렇게 표현된다.</p>\n<ul>\n<li>미분 값을 행렬 기반의 수학공식으로 표현해 보자</li>\n</ul>\n<p>$$w_11^3$$ => $$z_1^3$$ -> $$a_1^3$$ -> $$E1$$<br>\n하지만 E2와는 관련 없다.</p>\n<p>​* 출력층 관련 W 4개, b 2개 공식을 유도하자.</p>\n<ul>\n<li>출력층 오차역전파 (Back Propagation) 공식 (Insight) ?</li>\n</ul>\n<p>$$∂E/∂w_11^3 = (a_1^3-t_1^3)*a_1^3(1-a_1^3)*a_1^2$$<br>\n=> 오차 $$(a_1^3-t_1^3)$$ 에 대해 sigmoid 미분만큼 $$a_1^3(1-a_1^3)$$ 변환을 했다고 볼 수 있다.</p>\n<p>​=> 이러한 가중치 $$W_2$$ / 가중치 $$W_3$$ / 바이어스 $$b_2$$ / 바이어스 $$b_3$$ 미분 값을 수치미분이 아닌 행렬 기반의 수학공식을 이용하는 오차역전파를 구현해 냈다.</p>\n<p>​$$∂E/∂W$$ = (이전층 출력)^T * 자기층의 가상손실</p>\n<p>$$∂E/∂b$$ = 자기층의 가상손실 loss_n</p>\n<p>이라면, 이런 패턴을 찾아 내면 공식을 만들 수 있을 거다. 검증은 필요하지만.</p>\n<p>cf. 실제 오차는 출력층에만 있다. 중간 중간은 정답이 없으니 그냥 계산값이다.</p>\n<ul>\n<li>은닉층 오차역전파 (Back Propagation) 공식 (Insight) ?</li>\n</ul>\n<p>$$∂E/∂w_11^2 = $$\r\n$$ (a_1^3-t_1^3)<em>a_1^3</em>(1-a_1^3)<em>w_11^3</em>a_1^2*(1-a_1^2)<em>a_1^1$$\r\n$$+ (a_2^3-t_2^3)<em>a_2^3</em>(1-a_2^3)<em>w_21^3</em>a_1^2</em>(1-a_1^2)*a_1^1$$</p>\n<p>은닉층 오차역전파 가중치 공식 : 다음층 $$(a_1^3-t_1^3)<em>a_1^3</em>(1-a_1^3)$$ | $$w_11^3<em>a_1^2</em>(1-a_1^2)$$ | 이전층 $$a_1^1$$  => 가운데만 알면 된다.</p>\n<p>그러니 가상의 손실에 대해 패턴화 해보자.<br>\n오차가 거꾸로 넘어올 때는 w_3의 Transpose로 넘어올 거 같은데 맞을까...?</p>\n<p>​DL을 하는 목적은 오차를 최소화하는 W, b 값으로의 update하기 이다.<br>\n그래서 그동안 $$w_2 = w_2 - α∂E/∂w_2)$$ 이렇게 미분을 썼는데,<br>\n이 대신 오차역전파를 쓰면 $$w2 = w2 - a [loss3 * w_3^T]$$ 이렇게 표현할 수 있다.</p>\n<p>미분이든 지금 만든 공식이든 에러가 최소가 되면 DL은 ok다.<br>\nDL은 min 오차에 최적합된 w3, w3, b2 ,b3 구하는게 목표니까.</p>\n<ul>\n<li>\n<p>오차역전파 공식 구하는 순서</p>\n<ul>\n<li>출력층의 손실 = (출력층출력 - 정답) X 출력층출력(1 - 출력층출력)</li>\n</ul>\n<p>=> $$loss_3 = (A^3 - Target) * A^3 * (1-A^3)$$</p>\n<ul>\n<li>현재층에 적용되는 가중치 변화율 ∂E/∂W = (이전층 출력)^T• 현재층 손실</li>\n</ul>\n<p>=> $$W_3 = W_3 - α∂E/∂W_3 = W_3 - α*(A^2^T•loss_3)$$</p>\n<ul>\n<li>현재층의 바이어스 변화율 ∂E/∂b = 현재층 손실</li>\n</ul>\n<p>=> $$b_3 = b_3 - α∂E/∂b_3 = b_3 - α*loss_3)$$</p>\n</li>\n</ul>\n<p>=> 이런 식으로 공식을 일반화할 수 있다.</p>\n<p>​___</p>\n<h4 id=\"예제1\" style=\"position:relative;\">예제1<a href=\"#%EC%98%88%EC%A0%9C1\" aria-label=\"예제1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>dict으로 가상의 sig함수 정의할 수 있다.</li>\n</ul>\n<p>cf. C언어 # ifdef DEBUG(TEST) # else if RELEASE</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">A <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 벡터</span>\r\nB <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ndmin<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1s3행렬 / 2차원</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>오차역전파 모든 data가 행렬로 표시되어야 한다 transpose를 쓰기 위해서는.​</p>\n<p>미분은 속도는 느리나, 쓰기 편리했지만,<br>\n이런 점에서 오차역전파는 속도는 빠르나 쓰기 조금 불편한 부분이 있다. (일일이 데이터타입을 다 행렬로 만들어 줘야 하니까...) => trade-off</p>\n<p>​___</p>\n<h4 id=\"예제2\" style=\"position:relative;\">예제2<a href=\"#%EC%98%88%EC%A0%9C2\" aria-label=\"예제2 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>mnist를 은닉층 노드 100개 쓸 때 미분으로 하면 49시간 걸리는데, 오차역전파는 1분이면 충분하다. (...)</p>\n<p>그러니 이렇게 나누기를 바꿀 수 있다면 곱하기로 바꾸자.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#13%EC%9D%BC%EC%B0%A8\">13일차</a></p>\n<ul>\n<li><a href=\"#%EB%A9%94%EB%AA%A8\">메모</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#1-%EC%98%A4%EC%B0%A8%EC%97%AD%EC%A0%84%ED%8C%8C\">1. 오차역전파</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%A0%9C1\">예제1</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C2\">예제2</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"AI 이노베이션 스퀘어 13기 기본반 13일차 후기"}}},"pageContext":{"slug":"/ai-이노베이션-스퀘어-13일차/"}},
    "staticQueryHashes": ["3159585216"]}