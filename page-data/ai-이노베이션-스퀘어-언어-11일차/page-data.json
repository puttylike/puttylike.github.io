{"componentChunkName":"component---src-templates-blog-post-js","path":"/ai-이노베이션-스퀘어-언어-11일차/","result":{"data":{"markdownRemark":{"html":"<p>multi classification까지 배웠다. pytorch는 맛보기 정도만 했다.</p>\n<hr>\n<h3 id=\"11일차\" style=\"position:relative;\">11일차<a href=\"#11%EC%9D%BC%EC%B0%A8\" aria-label=\"11일차 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>\n<p>01_neural_network_regression4.ipynb 를 연다.</p>\n</li>\n<li>\n<p>02_neural_network_classification.ipynb 를 열어 이어서 진행한다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># A = tf.cast(tf.range(-10,10), tf.float32)</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> A\r\n\r\n<span class=\"token comment\"># (&lt;tf.Tensor: shape=(20,), dtype=float32, numpy=</span>\r\n<span class=\"token comment\">#  array([-10.,  -9.,  -8.,  -7.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,</span>\r\n<span class=\"token comment\">#           1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],</span>\r\n<span class=\"token comment\">#        dtype=float32)>,</span>\r\n<span class=\"token comment\">#  &lt;tf.Tensor: shape=(20,), dtype=float32, numpy=</span>\r\n<span class=\"token comment\">#  array([-10.,  -9.,  -8.,  -7.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,</span>\r\n<span class=\"token comment\">#           1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],</span>\r\n<span class=\"token comment\">#        dtype=float32)>)</span>\r\n\r\nA <span class=\"token operator\">==</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># &lt;tf.Tensor: shape=(20,), dtype=bool, numpy=</span>\r\n<span class=\"token comment\"># array([ True,  True,  True,  True,  True,  True,  True,  True,  True,</span>\r\n<span class=\"token comment\">#         True,  True,  True,  True,  True,  True,  True,  True,  True,</span>\r\n<span class=\"token comment\">#         True,  True])></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>linear function : 입력값을 변경하지 않는다.<br>\nnon-linear function : 입력값을 변경한다.<br>\nneural network (신경망)은 입력과 출력 사이의 패턴을 찾기 위해서 대량으로 이런 변환을 수행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1000</span>\r\n\r\nX_train<span class=\"token punctuation\">,</span> y_train <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">800</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">800</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 전체 데이터의 80%</span>\r\nX_test<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token number\">800</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">800</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 전체 데이터의 20%</span>\r\n\r\nX_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">.</span>shape\r\n\r\n<span class=\"token comment\"># ((800, 2), (200, 2), (800,), (200,))</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>cf. <a href=\"https://www.tensorflow.org/api_docs/python/tf/keras/activations/linear\">https://www.tensorflow.org/api_docs/python/tf/keras/activations/linear</a></p>\n<p>=> model_8을 가져와 model_9로 만든다. hyper parameter 값을 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_9 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_9<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>binary_crossentropy<span class=\"token punctuation\">,</span>  \r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 3. 모델을 fit</span>\r\nhistory_model_9 <span class=\"token operator\">=</span> model_9<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Epoch 1/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 2s 2ms/step - loss: 0.6847 - accuracy: 0.5425</span>\r\n<span class=\"token comment\"># Epoch 2/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 5ms/step - loss: 0.6777 - accuracy: 0.5525</span>\r\n<span class=\"token comment\"># Epoch 3/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.6736 - accuracy: 0.5512</span>\r\n<span class=\"token comment\"># Epoch 4/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 1ms/step - loss: 0.6681 - accuracy: 0.5775</span>\r\n<span class=\"token comment\"># Epoch 5/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.6633 - accuracy: 0.5850</span>\r\n<span class=\"token comment\"># Epoch 6/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 3ms/step - loss: 0.6546 - accuracy: 0.5838</span>\r\n<span class=\"token comment\"># Epoch 7/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 3ms/step - loss: 0.6413 - accuracy: 0.6750</span>\r\n<span class=\"token comment\"># Epoch 8/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.6264 - accuracy: 0.7013</span>\r\n<span class=\"token comment\"># Epoch 9/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 3ms/step - loss: 0.6038 - accuracy: 0.7487</span>\r\n<span class=\"token comment\"># Epoch 10/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.5714 - accuracy: 0.7738</span>\r\n<span class=\"token comment\"># Epoch 11/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.5404 - accuracy: 0.7650</span>\r\n<span class=\"token comment\"># Epoch 12/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.5015 - accuracy: 0.7837</span>\r\n<span class=\"token comment\"># Epoch 13/25</span>\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.1619 - accuracy: 0.9787</span>\r\n<span class=\"token comment\"># Epoch 24/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.1550 - accuracy: 0.9775</span>\r\n<span class=\"token comment\"># Epoch 25/25</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.1490 - accuracy: 0.9762</span>\r\n\r\nloss<span class=\"token punctuation\">,</span> accuracy <span class=\"token operator\">=</span> model_9<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"테스트 데이터셋에 대한 모델의 loss는 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>loss<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"테스트 데이터셋에 대한 모델의 accuracy는 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> accuracy <span class=\"token punctuation\">:</span><span class=\"token format-spec\"> .2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 7/7 [==============================] - 0s 3ms/step - loss: 0.1247 - accuracy: 1.0000</span>\r\n<span class=\"token comment\"># 테스트 데이터셋에 대한 모델의 loss는 0.1246885135769844</span>\r\n<span class=\"token comment\"># 테스트 데이터셋에 대한 모델의 accuracy는  100.00</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"plot\"</span><span class=\"token punctuation\">)</span>\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_9<span class=\"token punctuation\">,</span> X<span class=\"token operator\">=</span>X_train<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span>y_train<span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span>\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_9<span class=\"token punctuation\">,</span> X<span class=\"token operator\">=</span>X_test<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span>y_test<span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\">## 모델이 학습을 하는 동안의 모습을 보고 싶다!</span>\r\n<span class=\"token comment\">## 각 epoch 마다 성능이 어떻게 달라지는지 보고 싶다!</span>\r\n<span class=\"token comment\">## 그래서 우리는 loss curve (손실 곡선) or 학습 곡선</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>history_model_9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> history_model_9<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>history_model_9<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> history_model_9<span class=\"token punctuation\">.</span>history\r\n\r\n<span class=\"token comment\"># (keras.callbacks.History,</span>\r\n<span class=\"token comment\">#  &lt;keras.callbacks.History at 0x1d726e7ee80>,</span>\r\n<span class=\"token comment\">#  dict,</span>\r\n<span class=\"token comment\">#  {'loss': [0.6846511960029602,</span>\r\n<span class=\"token comment\">#    0.6777209639549255,</span>\r\n<span class=\"token comment\">#    0.6735945343971252,</span>\r\n<span class=\"token comment\">#    0.6681486368179321,</span>\r\n<span class=\"token comment\">#    0.6632686853408813,</span>\r\n<span class=\"token comment\">#    0.6545671820640564,</span>\r\n<span class=\"token comment\">#    0.6412575244903564,</span>\r\n<span class=\"token comment\">#    0.6264281272888184,</span>\r\n<span class=\"token comment\">#    0.6038310527801514,</span>\r\n<span class=\"token comment\">#    0.5714035630226135,</span>\r\n<span class=\"token comment\">#    0.540442943572998,</span>\r\n<span class=\"token comment\">#    0.5015039443969727,</span>\r\n<span class=\"token comment\">#    0.468331903219223,</span>\r\n<span class=\"token comment\">#    0.4113016128540039,</span>\r\n<span class=\"token comment\">#    0.3625060021877289,</span>\r\n<span class=\"token comment\">#    0.32090437412261963,</span>\r\n<span class=\"token comment\">#    0.28470802307128906,</span>\r\n<span class=\"token comment\">#    0.25971999764442444,</span>\r\n<span class=\"token comment\">#    0.23746901750564575,</span>\r\n<span class=\"token comment\">#    0.21351958811283112,</span>\r\n<span class=\"token comment\">#    0.1938202828168869,</span>\r\n<span class=\"token comment\">#    0.17524370551109314,</span>\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\"># ...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> history_model_9.history 의 type은 dict이다. loss가 떨어지는 만큼, accuracy는 올라간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_model_9<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># loss\taccuracy</span>\r\n<span class=\"token comment\"># 0\t0.684651\t0.54250</span>\r\n<span class=\"token comment\"># 1\t0.677721\t0.55250</span>\r\n<span class=\"token comment\"># 2\t0.673595\t0.55125</span>\r\n<span class=\"token comment\"># 3\t0.668149\t0.57750</span>\r\n<span class=\"token comment\"># 4\t0.663269\t0.58500</span>\r\n<span class=\"token comment\"># 5\t0.654567\t0.58375</span>\r\n<span class=\"token comment\"># ...</span>\r\n\r\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_model_9<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Model_9 training curves\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>신경망에서 hyper parameter를 tuning을 해서 개선을 시킬 수 있는 아주 중요한 것이 바로 learning rate!<br>\n앞의 model_9에서 optimizer를 Adam을 사용했는데, 0.001 (default) => 0.01로 변경<br>\n이런 hyper parameter의 값은 여러 실험을 통해서 얻을 수 있다! 정답도 없다!<br>\n모델을 만드는 사람이 결정하는 문제!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_10 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_10<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> <span class=\"token string\">\"binary_crossentropy\"</span><span class=\"token punctuation\">,</span>  \r\n    optimizer <span class=\"token operator\">=</span> <span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nlr_scheduler <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span>LearningRateScheduler<span class=\"token punctuation\">(</span>\r\n    <span class=\"token keyword\">lambda</span> epoch <span class=\"token punctuation\">:</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span>epoch<span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 3. 모델을 fit</span>\r\nhistory_model_10 <span class=\"token operator\">=</span> model_10<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>lr_scheduler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.9650 - accuracy: 0.4963</span>\r\n<span class=\"token comment\"># Epoch 99/100</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.9718 - accuracy: 0.4913</span>\r\n<span class=\"token comment\"># Epoch 100/100</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.8583 - accuracy: 0.4613</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_model_10<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># loss\taccuracy\tlr</span>\r\n<span class=\"token comment\"># 0\t0.694489\t0.49875\t0.000100</span>\r\n<span class=\"token comment\"># 1\t0.693771\t0.49750\t0.000112</span>\r\n<span class=\"token comment\"># 2\t0.693004\t0.49625\t0.000126</span>\r\n<span class=\"token comment\"># 3\t0.692244\t0.49750\t0.000141</span>\r\n<span class=\"token comment\"># 4\t0.691439\t0.50625\t0.000158</span>\r\n<span class=\"token comment\"># ...</span>\r\n\r\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_model_10<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> xlabel<span class=\"token operator\">=</span><span class=\"token string\">\"epochs\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">lrs <span class=\"token operator\">=</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>semilogx<span class=\"token punctuation\">(</span>lrs<span class=\"token punctuation\">,</span> history_model_10<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">\"loss\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Learning Rate\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Loss\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Learning rate vs. loss\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Learning Rate (LR)의 이상적인 값을 찾는 것이 중요!<br>\n아니면 최소한 모델을 처음 만들 때 시작 포인트라도 알았으면 좋겠다.<br>\n=> loss는 여전히 감소하지만, 그렇다고 최저값은 아닌 값을 취한다!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">4</span> <span class=\"token comment\"># 전형적으로 많이 사용하는 learning rate</span>\r\n\r\n<span class=\"token comment\"># (1, 0.1, 0.01, 0.001, 0.0001)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_11 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_11<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> <span class=\"token string\">\"binary_crossentropy\"</span><span class=\"token punctuation\">,</span>  \r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 3. 모델을 fit</span>\r\nhistory_model_11 <span class=\"token operator\">=</span> model_11<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.0798 - accuracy: 0.9937</span>\r\n<span class=\"token comment\"># Epoch 19/20</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.0845 - accuracy: 0.9875</span>\r\n<span class=\"token comment\"># Epoch 20/20</span>\r\n<span class=\"token comment\"># 25/25 [==============================] - 0s 2ms/step - loss: 0.0790 - accuracy: 0.9887</span>\r\n\r\nmodel_11<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 7/7 [==============================] - 0s 4ms/step - loss: 0.0574 - accuracy: 0.9900</span>\r\n<span class=\"token comment\"># [0.057401832193136215, 0.9900000095367432]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"plot\"</span><span class=\"token punctuation\">)</span>\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_11<span class=\"token punctuation\">,</span> X<span class=\"token operator\">=</span>X_train<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span>y_train<span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span>\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_11<span class=\"token punctuation\">,</span> X<span class=\"token operator\">=</span>X_test<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span>y_test<span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\nloss<span class=\"token punctuation\">,</span> accuracy <span class=\"token operator\">=</span> model_11<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"테스트 데이터셋에 대한 모델의 loss는 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>loss<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"테스트 데이터셋에 대한 모델의 accuracy는 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> accuracy <span class=\"token punctuation\">:</span><span class=\"token format-spec\"> .2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 7/7 [==============================] - 0s 2ms/step - loss: 0.0574 - accuracy: 0.9900</span>\r\n<span class=\"token comment\"># 테스트 데이터셋에 대한 모델의 loss는 0.057401832193136215</span>\r\n<span class=\"token comment\"># 테스트 데이터셋에 대한 모델의 accuracy는  99.00</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><a href=\"https://www.dataschool.io/simple-guide-to-confusion-matrix-terminology/\">https://www.dataschool.io/simple-guide-to-confusion-matrix-terminology/</a></li>\n</ul>\n<h3 id=\"분류classification을-평가하는-방법\" style=\"position:relative;\">분류(Classification)을 평가하는 방법<a href=\"#%EB%B6%84%EB%A5%98classification%EC%9D%84-%ED%8F%89%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"분류classification을 평가하는 방법 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>Accuracy : 100개의 예측 중에서 몇 개 정확하게 맞았는지 여부! 95%라면 100개 중에 95개 정확하다!</li>\n<li>Precision : 총 표본 (sample)에 대한 정답의 비율</li>\n<li>Recall : 진짜 참의 값 (true positive)과 가짜 거짓 (false negative)의 총 갯수에 대한 진짜 참의 비율</li>\n<li>F1-Score : precision과 recall을 합친 것! 1이 가장 좋고, 0은 가장 나쁘고</li>\n<li>Confusion matrix : Precision과 Recall을 표 형태로 비교하려는 것</li>\n<li>Classification report : 위의 모든 평가들을 보여주는 것</li>\n</ol>\n<p>Confusion matrix를 그려보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> confusion_matrix\r\n\r\ny_preds <span class=\"token operator\">=</span> model_11<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\r\nconfusion_matrix<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_preds<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># ValueError: Classification metrics can't handle a mix of binary and continuous targets</span>\r\n<span class=\"token comment\"># ---------------------------------------------------------------------------</span>\r\n<span class=\"token comment\"># ValueError                                Traceback (most recent call last)</span>\r\n<span class=\"token comment\"># ~\\AppData\\Local\\Temp/ipykernel_10380/3569574710.py in &lt;module></span>\r\n<span class=\"token comment\">#       2</span>\r\n<span class=\"token comment\">#       3 y_preds = model_11.predict(X_test)</span>\r\n<span class=\"token comment\"># ----> 4 confusion_matrix(y_test, y_preds)</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># c:\\20210822\\venv_20210822\\lib\\site-packages\\sklearn\\utils\\validation.py in inner_f(*args, **kwargs)</span>\r\n<span class=\"token comment\">#      61             extra_args = len(args) - len(all_args)</span>\r\n<span class=\"token comment\">#      62             if extra_args &lt;= 0:</span>\r\n<span class=\"token comment\"># ---> 63                 return f(*args, **kwargs)</span>\r\n<span class=\"token comment\">#      64</span>\r\n<span class=\"token comment\">#      65             # extra_args > 0</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># c:\\20210822\\venv_20210822\\lib\\site-packages\\sklearn\\metrics\\_classification.py in confusion_matrix(y_true, y_pred, labels, sample_weight, normalize)</span>\r\n<span class=\"token comment\">#     297</span>\r\n<span class=\"token comment\">#     298     \"\"\"</span>\r\n<span class=\"token comment\"># --> 299     y_type, y_true, y_pred = _check_targets(y_true, y_pred)</span>\r\n<span class=\"token comment\">#     300     if y_type not in (\"binary\", \"multiclass\"):</span>\r\n<span class=\"token comment\">#     301         raise ValueError(\"%s is not supported\" % y_type)</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># c:\\20210822\\venv_20210822\\lib\\site-packages\\sklearn\\metrics\\_classification.py in _check_targets(y_true, y_pred)</span>\r\n<span class=\"token comment\">#      90</span>\r\n<span class=\"token comment\">#      91     if len(y_type) > 1:</span>\r\n<span class=\"token comment\"># ---> 92         raise ValueError(\"Classification metrics can't handle a mix of {0} \"</span>\r\n<span class=\"token comment\">#      93                          \"and {1} targets\".format(type_true, type_pred))</span>\r\n<span class=\"token comment\">#      94</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># ValueError: Classification metrics can't handle a mix of binary and continuous targets</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">y_preds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y_preds<span class=\"token punctuation\">.</span>shape <span class=\"token comment\"># prediction probabilities</span>\r\n\r\n<span class=\"token comment\"># (array([[9.8526549e-01],</span>\r\n<span class=\"token comment\">#         [9.9923790e-01],</span>\r\n<span class=\"token comment\">#         [9.9032354e-01],</span>\r\n<span class=\"token comment\">#         [9.9706948e-01],</span>\r\n<span class=\"token comment\">#         [3.9622986e-01],</span>\r\n<span class=\"token comment\">#         [1.8126935e-02],</span>\r\n<span class=\"token comment\">#         [9.6829075e-01],</span>\r\n<span class=\"token comment\">#         [1.9746780e-02],</span>\r\n<span class=\"token comment\">#         [9.9967158e-01],</span>\r\n<span class=\"token comment\">#         [5.6460500e-04]], dtype=float32),</span>\r\n<span class=\"token comment\">#  (200, 1))</span>\r\n\r\ny_test<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">.</span>shape\r\n<span class=\"token comment\"># (array([1, 1, 1, 1, 0, 0, 1, 0, 1, 0], dtype=int64), (200,))</span>\r\n\r\ntf<span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>y_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># &lt;tf.Tensor: shape=(10, 1), dtype=float32, numpy=</span>\r\n<span class=\"token comment\"># array([[1.],</span>\r\n<span class=\"token comment\">#        [1.],</span>\r\n<span class=\"token comment\">#        [1.],</span>\r\n<span class=\"token comment\">#        [1.],</span>\r\n<span class=\"token comment\">#        [0.],</span>\r\n<span class=\"token comment\">#        [0.],</span>\r\n<span class=\"token comment\">#        [1.],</span>\r\n<span class=\"token comment\">#        [0.],</span>\r\n<span class=\"token comment\">#        [1.],</span>\r\n<span class=\"token comment\">#        [0.]], dtype=float32)></span>\r\n\r\nconfusion_matrix<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>y_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># array([[99,  2],</span>\r\n<span class=\"token comment\">#        [ 0, 99]], dtype=int64)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\r\n\r\ncm <span class=\"token operator\">=</span> confusion_matrix<span class=\"token punctuation\">(</span>y_test <span class=\"token punctuation\">,</span>tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>y_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\ncm_norm <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> cm<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\r\ncm<span class=\"token punctuation\">,</span> cm_norm\r\n<span class=\"token comment\"># (array([[99,  2],</span>\r\n<span class=\"token comment\">#         [ 0, 99]], dtype=int64),</span>\r\n<span class=\"token comment\">#  array([[0.98019802, 0.01980198],</span>\r\n<span class=\"token comment\">#         [0.        , 1.        ]]))</span>\r\n\r\nn_classes <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\nn_classes <span class=\"token comment\"># 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> figsize<span class=\"token punctuation\">)</span>\r\ncax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">.</span>matshow<span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>Blues<span class=\"token punctuation\">)</span>\r\nfig<span class=\"token punctuation\">.</span>colorbar<span class=\"token punctuation\">(</span>cax<span class=\"token punctuation\">)</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> confusion matrix가 생성되었다. 여기에 수치 등을 표시해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\r\n\r\ncm <span class=\"token operator\">=</span> confusion_matrix<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>y_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\ncm_norm <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> cm<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\r\nn_classes <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n\r\nfig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> figsize<span class=\"token punctuation\">)</span>\r\ncax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">.</span>matshow<span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>Blues<span class=\"token punctuation\">)</span>\r\nfig<span class=\"token punctuation\">.</span>colorbar<span class=\"token punctuation\">(</span>cax<span class=\"token punctuation\">)</span>\r\n\r\nclasses <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\r\n\r\n<span class=\"token keyword\">if</span> classes<span class=\"token punctuation\">:</span>\r\n    labels <span class=\"token operator\">=</span> classes\r\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n    labels <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\nax<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>\r\n    title <span class=\"token operator\">=</span> <span class=\"token string\">\"Confusion Matrix\"</span><span class=\"token punctuation\">,</span>\r\n    xlabel <span class=\"token operator\">=</span> <span class=\"token string\">\"Predicted label\"</span><span class=\"token punctuation\">,</span>\r\n    ylabel <span class=\"token operator\">=</span> <span class=\"token string\">\"True label\"</span><span class=\"token punctuation\">,</span>\r\n    xticks <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>n_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    yticks <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>n_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    xticklabels <span class=\"token operator\">=</span> labels<span class=\"token punctuation\">,</span>\r\n    yticklabels <span class=\"token operator\">=</span> labels\r\n<span class=\"token punctuation\">)</span>\r\n\r\nax<span class=\"token punctuation\">.</span>xaxis<span class=\"token punctuation\">.</span>set_label_position<span class=\"token punctuation\">(</span><span class=\"token string\">\"bottom\"</span><span class=\"token punctuation\">)</span>\r\nax<span class=\"token punctuation\">.</span>xaxis<span class=\"token punctuation\">.</span>tick_bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\nax<span class=\"token punctuation\">.</span>xaxis<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>set_size<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\r\nax<span class=\"token punctuation\">.</span>yaxis<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>set_size<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\r\nax<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span>set_size<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\r\n\r\nthreshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cm<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>\r\n\r\n<span class=\"token keyword\">import</span> itertools\r\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    plt<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>\r\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cm_norm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">%)\"</span></span><span class=\"token punctuation\">,</span>\r\n        horizontalalignment <span class=\"token operator\">=</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\r\n        color <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token keyword\">if</span> cm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> threshold <span class=\"token keyword\">else</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span>\r\n        size <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\r\n    <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">\r\ncm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># (2, 2, range(0, 2), range(0, 2))</span>\r\n\r\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 0 0</span>\r\n<span class=\"token comment\"># 0 1</span>\r\n<span class=\"token comment\"># 0 2</span>\r\n<span class=\"token comment\"># 0 3</span>\r\n<span class=\"token comment\"># 1 0</span>\r\n<span class=\"token comment\"># 1 1</span>\r\n<span class=\"token comment\"># 1 2</span>\r\n<span class=\"token comment\"># 1 3    </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2 id=\"multi-classification-fashion-mnist\" style=\"position:relative;\">multi-classification (Fashion Mnist)<a href=\"#multi-classification-fashion-mnist\" aria-label=\"multi classification fashion mnist permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/zalandoresearch/fashion-mnist\">https://github.com/zalandoresearch/fashion-mnist</a></p>\n</li>\n<li>\n<p><a href=\"https://www.tensorflow.org/tutorials/keras/classification\">https://www.tensorflow.org/tutorials/keras/classification</a></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\r\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\r\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\r\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\r\n\r\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> fashion_mnist\r\n<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fashion_mnist<span class=\"token punctuation\">.</span>load_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz</span>\r\n<span class=\"token comment\"># 32768/29515 [=================================] - 0s 0us/step</span>\r\n<span class=\"token comment\"># 40960/29515 [=========================================] - 0s 0us/step</span>\r\n<span class=\"token comment\"># Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz</span>\r\n<span class=\"token comment\"># 26427392/26421880 [==============================] - 1s 0us/step</span>\r\n<span class=\"token comment\"># 26435584/26421880 [==============================] - 1s 0us/step</span>\r\n<span class=\"token comment\"># Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz</span>\r\n<span class=\"token comment\"># 16384/5148 [===============================================================================================] - 0s 0s/step</span>\r\n<span class=\"token comment\"># Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz</span>\r\n<span class=\"token comment\"># 4423680/4422102 [==============================] - 0s 0us/step</span>\r\n<span class=\"token comment\"># 4431872/4422102 [==============================] - 0s 0us/step</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> train_data<span class=\"token punctuation\">.</span>shape\r\n\r\n<span class=\"token comment\"># (numpy.ndarray, (60000, 28, 28))</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> test_data<span class=\"token punctuation\">.</span>shape\r\n\r\n<span class=\"token comment\"># (numpy.ndarray, (10000, 28, 28))</span>\r\n\r\ntrain_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># (array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,</span>\r\n<span class=\"token comment\">#            0,   0,  13,  73,   0,   0,   1,   4,   0,   0,   0,   0,   1,</span>\r\n<span class=\"token comment\">#            1,   0],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,</span>\r\n<span class=\"token comment\">#            0,  36, 136, 127,  62,  54,   0,   0,   0,   1,   3,   4,   0,</span>\r\n<span class=\"token comment\">#            0,   3],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,</span>\r\n<span class=\"token comment\">#            0, 102, 204, 176, 134, 144, 123,  23,   0,   0,   0,   0,  12,</span>\r\n<span class=\"token comment\">#           10,   0],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0, 155, 236, 207, 178, 107, 156, 161, 109,  64,  23,  77, 130,</span>\r\n<span class=\"token comment\">#           72,  15],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,</span>\r\n<span class=\"token comment\">#           69, 207, 223, 218, 216, 216, 163, 127, 121, 122, 146, 141,  88,</span>\r\n<span class=\"token comment\">#          172,  66],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   0,</span>\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\">#            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0],</span>\r\n<span class=\"token comment\">#         [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,</span>\r\n<span class=\"token comment\">#            0,   0]], dtype=uint8),</span>\r\n<span class=\"token comment\">#  9)</span>\r\n\r\n<span class=\"token comment\"># 28 * 28</span>\r\n<span class=\"token comment\"># 784</span>\r\n\r\ntrain_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape\r\n<span class=\"token comment\"># ((28, 28), ())</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 정수형이다. 이 이미지를 그려보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 신발 모양</span>\r\n\r\ntrain_labels<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token comment\"># 9</span>\r\n\r\nclass_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"T-shirt/top\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Trouser\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Pullover\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Dress\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Coat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sandal\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Shirt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sneaker\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Bag\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Ankle boot\"</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>class_names<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 10</span>\r\n\r\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\ntrain_labels<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Pullover</span>\r\n<span class=\"token comment\"># 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>label까지 보여주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>class_names<span class=\"token punctuation\">[</span>train_labels<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>랜덤으로 이미지를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\r\n\r\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n    rand_index <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">[</span>rand_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>class_names<span class=\"token punctuation\">[</span>train_labels<span class=\"token punctuation\">[</span>rand_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>axis<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>input shape : 28x28 (height가 28, width가 28인 tensor) => 784개 픽셀의 모양으로 바꿀 예정<br>\n=> 즉, 행렬을 벡터 형태로 바꾸어 줄 예정<br>\noutput shape : 10개! 10개 중에 1개를 예측해야 한다!<br>\n=> 마지막 layer에서 activation 함수를 바꾸어야 합니다. sigmoid -> softmax로 교체<br>\nSoftMax 출력들을 각각의 확률로 표시<br>\nloss 함수를 변경!<br>\nbinary crossentropy -> SparseCategoricalCrossentropy 나<br>\nbinary crossentropy -> CategoricalCrossentropy 로 변경!<br>\nSparseCategoricalCrossentropy 는 라벨이 우리의 train_labels처럼 정수형일 때 사용하고!<br>\nCategoricalCrossentropy 는 one-hot encoding 형태일 때 사용!</p>\n<p>모델을 학습해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_12 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 784의 벡터 형태로 변경</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_12<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>SparseCategoricalCrossentropy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 3. 모델을 fit</span>\r\nhistory_model_12 <span class=\"token operator\">=</span> model_12<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> validation_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Epoch 1/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 5s 2ms/step - loss: 2.1608 - accuracy: 0.1639 - val_loss: 1.7971 - val_accuracy: 0.2073</span>\r\n<span class=\"token comment\"># Epoch 2/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.7081 - accuracy: 0.2487 - val_loss: 1.6460 - val_accuracy: 0.2800</span>\r\n<span class=\"token comment\"># Epoch 3/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.6278 - accuracy: 0.2824 - val_loss: 1.6023 - val_accuracy: 0.2910</span>\r\n<span class=\"token comment\"># Epoch 4/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 5s 2ms/step - loss: 1.6092 - accuracy: 0.2827 - val_loss: 1.5968 - val_accuracy: 0.2888</span>\r\n<span class=\"token comment\"># Epoch 5/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.5956 - accuracy: 0.2927 - val_loss: 1.5808 - val_accuracy: 0.3039</span>\r\n<span class=\"token comment\"># Epoch 6/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 4s 2ms/step - loss: 1.5921 - accuracy: 0.3008 - val_loss: 1.5695 - val_accuracy: 0.3060</span>\r\n<span class=\"token comment\"># Epoch 7/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.5806 - accuracy: 0.3111 - val_loss: 1.5695 - val_accuracy: 0.2895</span>\r\n<span class=\"token comment\"># Epoch 8/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.5494 - accuracy: 0.3313 - val_loss: 1.5456 - val_accuracy: 0.3569</span>\r\n<span class=\"token comment\"># Epoch 9/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.5101 - accuracy: 0.3535 - val_loss: 1.4687 - val_accuracy: 0.3960</span>\r\n<span class=\"token comment\"># Epoch 10/10</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> epoch이 적어 학습이 금방 끝났다. 30% 정도의 정확도를 보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">model_12<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Model: \"sequential_19\"</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># Layer (type)                 Output Shape              Param #   </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># flatten_1 (Flatten)          (None, 784)               0         </span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># dense_52 (Dense)             (None, 4)                 3140      </span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># dense_53 (Dense)             (None, 4)                 20        </span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># dense_54 (Dense)             (None, 10)                50        </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># Total params: 3,210</span>\r\n<span class=\"token comment\"># Trainable params: 3,210</span>\r\n<span class=\"token comment\"># Non-trainable params: 0</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n\r\ntrain_data<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> train_data<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (0, 255)</span>\r\n\r\ntrain_data<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> train_data<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">255</span>\r\n<span class=\"token comment\"># (0.0, 1.0)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> normalize 해보자. 정확도가 훨씬 올라간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">\r\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_13 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 784의 벡터 형태로 변경</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_13<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>SparseCategoricalCrossentropy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 3. 모델을 fit</span>\r\nhistory_model_13 <span class=\"token operator\">=</span> model_13<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_data<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> validation_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_data<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_model_12<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Not Using Normalization\"</span><span class=\"token punctuation\">)</span>\r\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_model_13<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Using Normalization\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Epoch 1/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.0348 - accuracy: 0.6474 - val_loss: 0.6937 - val_accuracy: 0.7617</span>\r\n<span class=\"token comment\"># Epoch 2/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 1ms/step - loss: 0.6376 - accuracy: 0.7757 - val_loss: 0.6400 - val_accuracy: 0.7820</span>\r\n<span class=\"token comment\"># Epoch 3/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5942 - accuracy: 0.7914 - val_loss: 0.6247 - val_accuracy: 0.7783</span>\r\n<span class=\"token comment\"># Epoch 4/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5750 - accuracy: 0.7979 - val_loss: 0.6078 - val_accuracy: 0.7881</span>\r\n<span class=\"token comment\"># Epoch 5/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5641 - accuracy: 0.8006 - val_loss: 0.6169 - val_accuracy: 0.7881</span>\r\n<span class=\"token comment\"># Epoch 6/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5544 - accuracy: 0.8043 - val_loss: 0.5855 - val_accuracy: 0.7951</span>\r\n<span class=\"token comment\"># Epoch 7/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 1ms/step - loss: 0.5488 - accuracy: 0.8063 - val_loss: 0.6097 - val_accuracy: 0.7836</span>\r\n<span class=\"token comment\"># Epoch 8/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5428 - accuracy: 0.8077 - val_loss: 0.5787 - val_accuracy: 0.7971</span>\r\n<span class=\"token comment\"># Epoch 9/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5373 - accuracy: 0.8097 - val_loss: 0.5698 - val_accuracy: 0.7977</span>\r\n<span class=\"token comment\"># Epoch 10/10</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5360 - accuracy: 0.8124 - val_loss: 0.5658 - val_accuracy: 0.8014</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 정확도가 향상되었다. epochs를 늘려본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_14 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 784의 벡터 형태로 변경</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_14<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>SparseCategoricalCrossentropy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nlr_scheduler <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span>LearningRateScheduler<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> epoch <span class=\"token punctuation\">:</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span>epoch<span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 3. 모델을 fit</span>\r\nhistory_model_14 <span class=\"token operator\">=</span> model_14<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_data<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> validation_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_data<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> callbacks<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>lr_scheduler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 1ms/step - loss: 1.2006 - accuracy: 0.5309 - val_loss: 1.1208 - val_accuracy: 0.5469</span>\r\n<span class=\"token comment\"># Epoch 39/40</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.1878 - accuracy: 0.5307 - val_loss: 1.0093 - val_accuracy: 0.6221</span>\r\n<span class=\"token comment\"># Epoch 40/40</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 1.1745 - accuracy: 0.5537 - val_loss: 1.4318 - val_accuracy: 0.4923</span>\r\n\r\nlrs <span class=\"token operator\">=</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>semilogx<span class=\"token punctuation\">(</span>lrs<span class=\"token punctuation\">,</span> history_model_14<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span><span class=\"token string\">\"loss\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Learning Rate\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Loss\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Learning rate vs. loss\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> learning rate가 1e-3일 때가 loss가 낮다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_15 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 784의 벡터 형태로 변경</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span>tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_15<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>SparseCategoricalCrossentropy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 3. 모델을 fit</span>\r\nhistory_model_15 <span class=\"token operator\">=</span> model_15<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_data<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> validation_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_data<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5176 - accuracy: 0.8157 - val_loss: 0.5582 - val_accuracy: 0.8053</span>\r\n<span class=\"token comment\"># Epoch 19/20</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5156 - accuracy: 0.8169 - val_loss: 0.5644 - val_accuracy: 0.8007</span>\r\n<span class=\"token comment\"># Epoch 20/20</span>\r\n<span class=\"token comment\"># 1875/1875 [==============================] - 3s 2ms/step - loss: 0.5146 - accuracy: 0.8177 - val_loss: 0.5660 - val_accuracy: 0.8075</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이제 우리가 해봐야 할 것!</p>\n<ol>\n<li>metric을 변경해서 성능을 평가! accuracy를 confusion matrix나 classification report를 이용</li>\n<li>시각화를 해봐서 예측을 확인한다.</li>\n<li>더 학습을 시키던가, 아니면 모델 구조를 바꾸어서 더 개선</li>\n<li>그냥 이 모델을 저장하고 사용한다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_confusion_matrix</span><span class=\"token punctuation\">(</span>\r\n    y_true<span class=\"token punctuation\">,</span>\r\n    y_pred<span class=\"token punctuation\">,</span>\r\n    classes <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\r\n    figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    text_size <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    cm <span class=\"token operator\">=</span> confusion_matrix<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span>\r\n    cm_norm <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">\"float\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> cm<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\r\n    n_classes <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n\r\n    fig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> figsize<span class=\"token punctuation\">)</span>\r\n    cax <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">.</span>matshow<span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>Blues<span class=\"token punctuation\">)</span>\r\n    fig<span class=\"token punctuation\">.</span>colorbar<span class=\"token punctuation\">(</span>cax<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">if</span> classes<span class=\"token punctuation\">:</span>\r\n        labels <span class=\"token operator\">=</span> classes\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        labels <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n    ax<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>\r\n        title <span class=\"token operator\">=</span> <span class=\"token string\">\"Confusion Matrix\"</span><span class=\"token punctuation\">,</span>\r\n        xlabel <span class=\"token operator\">=</span> <span class=\"token string\">\"Predicted label\"</span><span class=\"token punctuation\">,</span>\r\n        ylabel <span class=\"token operator\">=</span> <span class=\"token string\">\"True label\"</span><span class=\"token punctuation\">,</span>\r\n        xticks <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>n_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        yticks <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>n_classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        xticklabels <span class=\"token operator\">=</span> labels<span class=\"token punctuation\">,</span>\r\n        yticklabels <span class=\"token operator\">=</span> labels\r\n    <span class=\"token punctuation\">)</span>\r\n\r\n    ax<span class=\"token punctuation\">.</span>xaxis<span class=\"token punctuation\">.</span>set_label_position<span class=\"token punctuation\">(</span><span class=\"token string\">\"bottom\"</span><span class=\"token punctuation\">)</span>\r\n    ax<span class=\"token punctuation\">.</span>xaxis<span class=\"token punctuation\">.</span>tick_bottom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n    threshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cm<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>\r\n\r\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>cm<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        plt<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cm_norm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">%)\"</span></span><span class=\"token punctuation\">,</span>\r\n            horizontalalignment <span class=\"token operator\">=</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\r\n            color<span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token keyword\">if</span> cm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> threshold <span class=\"token keyword\">else</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span>\r\n            size <span class=\"token operator\">=</span> text_size\r\n        <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">y_probability_list <span class=\"token operator\">=</span> model_15<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test_data<span class=\"token operator\">/</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\r\ny_probability_list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># array([[8.5629982e-11, 3.5361769e-13, 2.6633732e-05, 4.6356295e-08,</span>\r\n<span class=\"token comment\">#         5.0949817e-05, 9.6118927e-02, 8.1778047e-08, 9.1869034e-02,</span>\r\n<span class=\"token comment\">#         4.0605087e-03, 8.0787373e-01],</span>\r\n<span class=\"token comment\">#        [3.4278621e-06, 1.2899216e-16, 9.5989150e-01, 2.0516354e-07,</span>\r\n<span class=\"token comment\">#         1.5329231e-02, 2.4532478e-13, 2.4142873e-02, 1.1383274e-28,</span>\r\n<span class=\"token comment\">#         6.3272589e-04, 4.4789129e-08],</span>\r\n<span class=\"token comment\">#        [6.1062710e-05, 9.9657673e-01, 4.3866475e-08, 3.3405658e-03,</span>\r\n<span class=\"token comment\">#         1.3249347e-05, 1.4383106e-21, 8.2789820e-06, 7.3236338e-18,</span>\r\n<span class=\"token comment\">#         5.4810872e-08, 4.9224388e-14],</span>\r\n<span class=\"token comment\">#        [7.5031574e-05, 9.9053687e-01, 4.2528450e-07, 9.2231557e-03,</span>\r\n<span class=\"token comment\">#         1.3623078e-04, 1.8276090e-18, 2.6808242e-05, 4.8123635e-14,</span>\r\n<span class=\"token comment\">#         1.4521424e-06, 2.2211207e-11],</span>\r\n<span class=\"token comment\">#        [7.2189875e-02, 1.5495756e-06, 2.5566894e-01, 1.0363093e-02,</span>\r\n<span class=\"token comment\">#         4.3541376e-02, 1.1069410e-13, 6.1693031e-01, 6.7543142e-23,</span>\r\n<span class=\"token comment\">#         1.3049159e-03, 1.2140315e-09]], dtype=float32)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>class_names<span class=\"token punctuation\">[</span>test_labels<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\ny_probability_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> class_names<span class=\"token punctuation\">[</span>y_probability_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token comment\"># (9, 'Ankle boot')</span>\r\n\r\ny_preds <span class=\"token operator\">=</span> y_probability_list<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\ny_preds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># array([9, 2, 1, 1, 6, 1, 4, 6, 5, 7], dtype=int64)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> labeling이 완료되었다. confusino matrix를 그려 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> confusion_matrix\r\n\r\nconfusion_matrix<span class=\"token punctuation\">(</span>\r\n    y_true <span class=\"token operator\">=</span> test_labels<span class=\"token punctuation\">,</span>\r\n    y_pred <span class=\"token operator\">=</span> y_preds\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># array([[696,   8,  25,  87,   9,   5, 160,   0,  10,   0],</span>\r\n<span class=\"token comment\">#        [  2, 939,   2,  35,   9,   0,  13,   0,   0,   0],</span>\r\n<span class=\"token comment\">#        [ 19,   2, 656,  10, 188,   0, 110,   0,  15,   0],</span>\r\n<span class=\"token comment\">#        [ 39,  10,  10, 819,  55,   0,  47,   1,  19,   0],</span>\r\n<span class=\"token comment\">#        [  0,   0,  95,  23, 800,   0,  73,   0,   7,   2],</span>\r\n<span class=\"token comment\">#        [  0,   0,   1,   0,   0, 894,   0,  60,   7,  38],</span>\r\n<span class=\"token comment\">#        [106,   4, 158,  57, 159,   1, 499,   0,  16,   0],</span>\r\n<span class=\"token comment\">#        [  0,   0,   0,   0,   0,  31,   0, 936,   0,  33],</span>\r\n<span class=\"token comment\">#        [  4,   1,  38,  15,   8,  12,   9,   5, 906,   2],</span>\r\n<span class=\"token comment\">#        [  0,   0,   1,   0,   2,  15,   0,  51,   1, 930]], dtype=int64)</span>\r\n\r\nmake_confusion_matrix<span class=\"token punctuation\">(</span>\r\n    y_true <span class=\"token operator\">=</span> test_labels<span class=\"token punctuation\">,</span>\r\n    y_pred <span class=\"token operator\">=</span> y_preds<span class=\"token punctuation\">,</span>\r\n    classes <span class=\"token operator\">=</span> class_names<span class=\"token punctuation\">,</span>\r\n    figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    text_size <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\r\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">plot_random_image</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">,</span> true_labels<span class=\"token punctuation\">,</span> classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    i <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n    target_image <span class=\"token operator\">=</span> images<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n    pred_probs <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>target_image<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    pred_label <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">[</span>pred_probs<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n    true_label <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">[</span>true_labels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\r\n\r\n    plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>target_image<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">if</span> pred_label <span class=\"token operator\">==</span> true_label<span class=\"token punctuation\">:</span>\r\n        color <span class=\"token operator\">=</span> <span class=\"token string\">\"green\"</span>\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span>\r\n\r\n    plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Pred: {} {:2.0f}% (True: {})\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\r\n        pred_label<span class=\"token punctuation\">,</span>\r\n        <span class=\"token number\">100</span><span class=\"token operator\">*</span>tf<span class=\"token punctuation\">.</span>reduce_max<span class=\"token punctuation\">(</span>pred_probs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        true_label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        color<span class=\"token operator\">=</span>color\r\n    <span class=\"token punctuation\">)</span>\r\n\r\nplot_random_image<span class=\"token punctuation\">(</span>model<span class=\"token operator\">=</span>model_14<span class=\"token punctuation\">,</span> images <span class=\"token operator\">=</span> test_data<span class=\"token punctuation\">,</span> true_labels <span class=\"token operator\">=</span> test_labels<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> class_names<span class=\"token punctuation\">)</span>    </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h2 id=\"파이토치\" style=\"position:relative;\">파이토치<a href=\"#%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98\" aria-label=\"파이토치 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>001_pytorch.ipynb</li>\n</ul>\n<p>파이토치를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">! pip3 install torch torchvision torchaudio\r\n\r\n<span class=\"token keyword\">import</span> torch\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1.9.0+cpu</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">my_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_data<span class=\"token punctuation\">)</span> <span class=\"token comment\"># list</span>\r\n\r\ntorch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>my_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>my_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dtype\r\n\r\n<span class=\"token comment\"># (tensor([[1, 2],</span>\r\n<span class=\"token comment\">#          [3, 4]]),</span>\r\n<span class=\"token comment\">#  torch.int64)</span>\r\n\r\nmy_tensor <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>my_data<span class=\"token punctuation\">)</span>\r\nmy_tensor<span class=\"token punctuation\">.</span>dtype <span class=\"token comment\"># torch.int64</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_tensor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> my_tensor<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (torch.Tensor, 'torch.LongTensor')</span>\r\n\r\nmy_tensor<span class=\"token punctuation\">.</span>device\r\n<span class=\"token comment\"># my_tensor.to(\"cuda\") # tensor를 GPU에서 사용하도록 처리</span>\r\n<span class=\"token comment\"># device(type='cpu')</span>\r\n\r\n\r\n<span class=\"token comment\"># my_tensor.to(\"cuda\")</span>\r\n<span class=\"token comment\"># AssertionError: Torch not compiled with CUDA enabled</span>\r\n<span class=\"token comment\"># ---------------------------------------------------------------------------</span>\r\n<span class=\"token comment\"># AssertionError                            Traceback (most recent call last)</span>\r\n<span class=\"token comment\"># ~\\AppData\\Local\\Temp/ipykernel_15492/198409501.py in &lt;module></span>\r\n<span class=\"token comment\"># ----> 1 my_tensor.to(\"cuda\")</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># c:\\20210822\\venv_20210822\\lib\\site-packages\\torch\\cuda\\__init__.py in _lazy_init()</span>\r\n<span class=\"token comment\">#     164                 \"multiprocessing, you must use the 'spawn' start method\")</span>\r\n<span class=\"token comment\">#     165         if not hasattr(torch._C, '_cuda_getDeviceCount'):</span>\r\n<span class=\"token comment\"># --> 166             raise AssertionError(\"Torch not compiled with CUDA enabled\")</span>\r\n<span class=\"token comment\">#     167         if _cudart is None:</span>\r\n<span class=\"token comment\">#     168             raise AssertionError(</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># AssertionError: Torch not compiled with CUDA enabled</span>\r\n\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">\r\ntorch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># tensor([[0., 0.],</span>\r\n<span class=\"token comment\">#         [0., 0.]])</span>\r\n\r\ntorch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># tensor([[1., 1.],</span>\r\n<span class=\"token comment\">#         [1., 1.]])</span>\r\n\r\nnew_tensor <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>new_tensor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new_tensor<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (torch.Tensor, 'torch.FloatTensor')</span>\r\n\r\nnew_tensor<span class=\"token punctuation\">.</span>dtype\r\n<span class=\"token comment\"># torch.float32</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 내부적으로는 float으로 돼 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">my_data\r\n<span class=\"token comment\"># [[1, 2], [3, 4]]</span>\r\nupdated_new_tensor <span class=\"token operator\">=</span> new_tensor<span class=\"token punctuation\">.</span>new_tensor<span class=\"token punctuation\">(</span>my_data<span class=\"token punctuation\">)</span>\r\n\r\nnew_tensor\r\n<span class=\"token comment\"># tensor([[1., 1.],</span>\r\n<span class=\"token comment\">#         [1., 1.]])</span>\r\n\r\nupdated_new_tensor\r\n<span class=\"token comment\"># tensor([[1., 2.],</span>\r\n<span class=\"token comment\">#         [3., 4.]])</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"왜-new_tensor로-tensor의-내용을-바꿔야-하나\" style=\"position:relative;\">왜 new_tensor로 tensor의 내용을 바꿔야 하나?<a href=\"#%EC%99%9C-new_tensor%EB%A1%9C-tensor%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%9D%84-%EB%B0%94%EA%BF%94%EC%95%BC-%ED%95%98%EB%82%98\" aria-label=\"왜 new_tensor로 tensor의 내용을 바꿔야 하나 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"tensor라는-것은-cpu나-gpu-메모리에-상주하고-있느-데이터-이때-properties를-유지하고-싶은-때가-있다\" style=\"position:relative;\">tensor라는 것은 cpu나 gpu 메모리에 상주하고 있느 데이터, 이때 properties를 유지하고 싶은 때가 있다.<a href=\"#tensor%EB%9D%BC%EB%8A%94-%EA%B2%83%EC%9D%80-cpu%EB%82%98-gpu-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%83%81%EC%A3%BC%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%95%8C-properties%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EB%95%8C%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"tensor라는 것은 cpu나 gpu 메모리에 상주하고 있느 데이터 이때 properties를 유지하고 싶은 때가 있다 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"특정-메모리에-지정되어-있는-tensor를-그대로-사용하면서-즉-주소를-유지하면서-tensor의-내용을-바꿀-때\" style=\"position:relative;\">특정 메모리에 지정되어 있는 tensor를 그대로 사용하면서, 즉, 주소를 유지하면서 tensor의 내용을 바꿀 때!<a href=\"#%ED%8A%B9%EC%A0%95-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%A7%80%EC%A0%95%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-tensor%EB%A5%BC-%EA%B7%B8%EB%8C%80%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4%EC%84%9C-%EC%A6%89-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%A9%B4%EC%84%9C-tensor%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%9D%84-%EB%B0%94%EA%BF%80-%EB%95%8C\" aria-label=\"특정 메모리에 지정되어 있는 tensor를 그대로 사용하면서 즉 주소를 유지하면서 tensor의 내용을 바꿀 때 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"value만-바뀌지-그-tensor의-property들은-유지가-된다\" style=\"position:relative;\">value만 바뀌지, 그 tensor의 property들은 유지가 된다.<a href=\"#value%EB%A7%8C-%EB%B0%94%EB%80%8C%EC%A7%80-%EA%B7%B8-tensor%EC%9D%98-property%EB%93%A4%EC%9D%80-%EC%9C%A0%EC%A7%80%EA%B0%80-%EB%90%9C%EB%8B%A4\" aria-label=\"value만 바뀌지 그 tensor의 property들은 유지가 된다 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">updated_new_tensor<span class=\"token punctuation\">.</span>dtype <span class=\"token comment\"># torch.float32</span>\r\n\r\nanother_tensor <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>int8<span class=\"token punctuation\">)</span>\r\nanother_tensor<span class=\"token punctuation\">.</span>dtype <span class=\"token comment\"># torch.int8</span>\r\n\r\nnew_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">]</span>\r\nanother_tensor<span class=\"token punctuation\">.</span>new_tensor<span class=\"token punctuation\">(</span>new_data<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># tensor([[1, 2],</span>\r\n<span class=\"token comment\">#         [3, 4],</span>\r\n<span class=\"token comment\">#         [5, 6]], dtype=torch.int8)</span>\r\n\r\nanother_tensor<span class=\"token punctuation\">.</span>dtype <span class=\"token comment\"># torch.int8</span>\r\n\r\nshape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\r\nmy_tensor <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 이떄 값들은 0 ~ 1 사이의 값</span>\r\n\r\nmy_tensor<span class=\"token punctuation\">,</span> my_tensor<span class=\"token punctuation\">.</span>dtype\r\n\r\nx_rand <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>rand_like<span class=\"token punctuation\">(</span>my_tensor<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\r\nx_rand<span class=\"token punctuation\">,</span> x_rand<span class=\"token punctuation\">.</span>dtype</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"#11%EC%9D%BC%EC%B0%A8\">11일차</a></li>\n<li><a href=\"#%EB%B6%84%EB%A5%98classification%EC%9D%84-%ED%8F%89%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">분류(Classification)을 평가하는 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#multi-classification-fashion-mnist\">multi-classification (Fashion Mnist)</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98\">파이토치</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%99%9C-new_tensor%EB%A1%9C-tensor%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%9D%84-%EB%B0%94%EA%BF%94%EC%95%BC-%ED%95%98%EB%82%98\">왜 new_tensor로 tensor의 내용을 바꿔야 하나?</a></p>\n</li>\n<li>\n<p><a href=\"#tensor%EB%9D%BC%EB%8A%94-%EA%B2%83%EC%9D%80-cpu%EB%82%98-gpu-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%83%81%EC%A3%BC%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B4%EB%95%8C-properties%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EB%95%8C%EA%B0%80-%EC%9E%88%EB%8B%A4\">tensor라는 것은 cpu나 gpu 메모리에 상주하고 있느 데이터, 이때 properties를 유지하고 싶은 때가 있다.</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8A%B9%EC%A0%95-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%A7%80%EC%A0%95%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-tensor%EB%A5%BC-%EA%B7%B8%EB%8C%80%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4%EC%84%9C-%EC%A6%89-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%98%EB%A9%B4%EC%84%9C-tensor%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%9D%84-%EB%B0%94%EA%BF%80-%EB%95%8C\">특정 메모리에 지정되어 있는 tensor를 그대로 사용하면서, 즉, 주소를 유지하면서 tensor의 내용을 바꿀 때!</a></p>\n</li>\n<li>\n<p><a href=\"#value%EB%A7%8C-%EB%B0%94%EB%80%8C%EC%A7%80-%EA%B7%B8-tensor%EC%9D%98-property%EB%93%A4%EC%9D%80-%EC%9C%A0%EC%A7%80%EA%B0%80-%EB%90%9C%EB%8B%A4\">value만 바뀌지, 그 tensor의 property들은 유지가 된다.</a></p>\n</li>\n</ul>","frontmatter":{"title":"AI 이노베이션 스퀘어 3기 언어반 11일차 후기"}}},"pageContext":{"slug":"/ai-이노베이션-스퀘어-언어-11일차/"}},"staticQueryHashes":["3159585216"]}