{"componentChunkName":"component---src-templates-blog-post-js","path":"/ai-이노베이션-스퀘어-언어-2일차/","result":{"data":{"markdownRemark":{"html":"<p>강사님도 나처럼 수학과 출신이셨다 깜놀했다,<br>\n다만, 전산도 이중 전공을 하셔서 그런가 스마트한 느낌(?)이 든다,</p>\n<p>오늘도(?) 산으로 가려나 싶다가, 자연어 처리 개요로 진입했다.</p>\n<hr>\n<h3 id=\"2일차\" style=\"position:relative;\">2일차<a href=\"#2%EC%9D%BC%EC%B0%A8\" aria-label=\"2일차 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>papers with code : 최신 논문 with GitHub 소스코드</li>\n</ul>\n<p>cf. <a href=\"https://paperswithcode.com/\">https://paperswithcode.com/</a><br>\n=> 가입을 하면 매주 summary 메일이 와서 좋다고 해서 가입 했다.</p>\n<ul>\n<li>visual studio code에서는 폴더열기 선택을 권장한다.</li>\n</ul>\n<p>폴더+폴더+폴더+...=>작업영역<br>\nvs code에서는 폴더가 하나의 프로젝트 영역이라고 간주</p>\n<h4 id=\"1-복습-예제\" style=\"position:relative;\">(1) 복습 예제<a href=\"#1-%EB%B3%B5%EC%8A%B5-%EC%98%88%EC%A0%9C\" aria-label=\"1 복습 예제 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>20210718 이라는 디렉토리를 C드라이브 밑에 생성하고<br>\nvenv_20210718이라는 가상환경을 생성 후<br>\n설치한 가상환경의 파이썬을 사용하도록 설정!<br>\n(보기 - 명령 팔레트 로 실행하기 싫으면 f1 키)<br>\njupyter pandas pandas-profiling 을 설치하고<br>\n(pip install jupyter pandas pandas-profiling 실행)<br>\nrequirements.txt를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">> python -m venv venv_20210718\r\n> venv_20210718\\Scripts\\activate\r\n> pip install jupyter pandas pandas-profiling\r\n> pip freeze > requirements.txt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>cf. python -m : python의 standard module을 사용한다는 의미</p>\n<p>cf. 보안이슈 error<br>\nwindows PowerShell 관리자 권한으로 실행 후,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">> Set-ExecutionPolicy Unrestricted</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h4 id=\"2-qr코드-생성기--리더기-프로그램\" style=\"position:relative;\">(2) QR코드 생성기 &#x26; 리더기 프로그램<a href=\"#2-qr%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B8%B0--%EB%A6%AC%EB%8D%94%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\" aria-label=\"2 qr코드 생성기  리더기 프로그램 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">> pip install pyqrcode pypng pyzbar</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>qrcode_generator.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pyqrcode\r\nmsg <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QR코드로 변환할 메시지를 입력해 주세요 : \"</span><span class=\"token punctuation\">)</span>\r\nqrcode <span class=\"token operator\">=</span> pyqrcode<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\r\nqrcode<span class=\"token punctuation\">.</span>png<span class=\"token punctuation\">(</span><span class=\"token string\">\"my_qrcode.png\"</span><span class=\"token punctuation\">,</span> scale<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QR코드가 생성되었습니다.\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> terminal 실행 후, 입력하면 이미지가 생성된다.<br>\n아직 ascii 코드만 입력 가능하다.</p>\n<p>ex) fermat39</p>\n<ul>\n<li>qrcode_reader.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pyzbar<span class=\"token punctuation\">.</span>pyzbar <span class=\"token keyword\">import</span> decode\r\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image <span class=\"token comment\"># pillow : OpenCV보다 강력하지는 않지만 간단하게 파이썬에서 이미지를 다룰 수 있다.</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QR 코드 리더기\"</span><span class=\"token punctuation\">)</span>\r\nqrcode_img <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_qrcode.png\"</span><span class=\"token punctuation\">)</span>\r\ndecoded_qrcode <span class=\"token operator\">=</span> decode<span class=\"token punctuation\">(</span>qrcode_img<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QR 코드에 담긴 내용 : \"</span><span class=\"token punctuation\">,</span> decoded_qrcode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>url_shorter.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">> pip install pyshorteners</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h5 id=\"cf-url-줄이는-예제\" style=\"position:relative;\">cf. url 줄이는 예제<a href=\"#cf-url-%EC%A4%84%EC%9D%B4%EB%8A%94-%EC%98%88%EC%A0%9C\" aria-label=\"cf url 줄이는 예제 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pyshorteners\r\nurl <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"줄일 URL 입력 : \"</span><span class=\"token punctuation\">)</span>\r\nshort_url <span class=\"token operator\">=</span> pyshorteners<span class=\"token punctuation\">.</span>Shortener<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tinyurl<span class=\"token punctuation\">.</span>short<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Short Url : \"</span><span class=\"token punctuation\">,</span>short_url<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 줄일 URL 입력 시, <a href=\"https://blog.naver.com/n_privacy/222414967528\">https://blog.naver.com/n_privacy/222414967528</a><br>\n이렇게 짧아졌다. <a href=\"https://tinyurl.com/yeubctyr\">https://tinyurl.com/yeubctyr</a></p>\n<hr>\n<h4 id=\"3-클라우드\" style=\"position:relative;\">(3) 클라우드<a href=\"#3-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C\" aria-label=\"3 클라우드 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li>Cloud\n<ul>\n<li>aws, gcp, azure (global)</li>\n<li>naver cloud, kt cloude, ... (국내 클라우드 사업자)</li>\n<li>docker, kubernetes</li>\n</ul>\n</li>\n</ul>\n<p>Iaas ( Infra as a server ) --> paas (Platform as a service)<br>\n--> saas (software as a service)<br>\n--> dass (data as a service)<br>\n--> assa (ai as a service)</p>\n<p>모델을 잘 만들었다 -> 이 모델을 잘 사용할 수 있도록 어떤 환경을 만들어야 한다. -> 어디다 만들까? 서버가 필요하다... 또한, 이런 서비스 구현이 필요하다... -> 유지보수 및 관리... 사람이 해야한다 -> 인건비...</p>\n<p>모델을 만들어 두면 끝이다!</p>\n<p>운영에서 사용하는 모델 : v1.0이라면,<br>\n꾸준히 데이터는 유입이 되고, 운영할 때 발생되는 버그나 결과가 나오게 되면 계속 개선을 해야 한다. : v1.0 ---> v1.2 ---> ....</p>\n<p>데이터는 돈이다 ==> 데이터 분석가는 멋있고, 연봉도 세고, 트렌드니까...<br>\n데이터는 돈이다 ==> 저장 비용 등의 문제,... 데이터를 얻는 비용,...</p>\n<p>cf. aihub 국가에서 주도적으로 데이터 셋을 만들고 있다. 매년 2500~3000억 씩 투자하면서 (세금으로)</p>\n<ul>\n<li>고려할 점\n<ul>\n<li>저장할 데이터의 범위 : 1년 치를 저장? 2년치? 3년치? (비례해서 비용이 증가)</li>\n<li>데이터 수집 주기</li>\n<li>데이터 검색을 바르게 하기 위한 플랫폼 유지 비용</li>\n</ul>\n</li>\n</ul>\n<p>ex) 스마트 팩토리 : 센서 데이터를 수집 ( 1초 단위 -> 마이크로초 단위 )</p>\n<ol>\n<li>================= --</li>\n</ol>\n<p>　　　　　　　　　　　<br>\n2) -------<strong><strong><strong>------</strong></strong></strong></p>\n<p>ex. 클라우드 내 ai 자연어 처리<br>\nai-900 (ms azure)</p>\n<hr>\n<h4 id=\"4-음성인식과-합성\" style=\"position:relative;\">(4) 음성인식과 합성<a href=\"#4-%EC%9D%8C%EC%84%B1%EC%9D%B8%EC%8B%9D%EA%B3%BC-%ED%95%A9%EC%84%B1\" aria-label=\"4 음성인식과 합성 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>cf. TTS ( text to speech ) : 문서 읽어주는<br>\ncf. STT ( speech to text ) : 음성을 문자로 만들어주는</p>\n<p>ex. 강좌음성, 회의음성, 고객상담, 고객응대 의 4가지 경우의 학습 데이터 구축했다면,</p>\n<ul>\n<li>강좌음성의 경우 : 조용한 곳에서 강의, 강의자 1명이 천천히 이야기를 한다.</li>\n<li>회의음성 : 여러 사람이 존재, 누가 이야기 했는지 구분을 해야하는데, 다소 불명확할 수도 있다, 회의실 환경이 울린다, 발화 톤이 일정치가 않다.</li>\n<li>고객상담, 고객 응대 : 거의 대부분 전화를 이용... 음질이 매우 나쁘다, 발음이 불명확하고, 알 수 없는 단어들이 나온다</li>\n</ul>\n<p>이미지 -> 라벨링 (어느 위치가 사과, 오렌지 마킹)<br>\n음성 -> transcription (전사) -> 대사를 만들어준다.</p>\n<p>이미지든, 음성이든 라벨링 해주는 직업이 생겼다. 인력회사 -> 디지털 인력회사</p>\n<p>nlp 최종 목적 : 번역, 챗봇, ...\r\n=> 챗봇 : 말귀를 알아듣는 챗봇 (과거에는 if else 챗봇)</p>\n<p>cf. NLP : Natural Language Processing 자연어 처리<br>\ncf. NLU : Natural Language Understanding 자연어 이해</p>\n<p>cf. <a href=\"https://aidemos.microsoft.com/text-analytics\">https://aidemos.microsoft.com/text-analytics</a>\r\ncf. <a href=\"https://aidemos.microsoft.com/luis/demo\">AI Demos</a></p>\n<p>cf. OCR : Form Recognizer (금융권 서비스를 이용할 때, 주민등록증이나 운전면허증 찍으면 )\r\ncomputer vision + nlp</p>\n<ul>\n<li><a href=\"https://mlflow.org/\">MLflow</a> - A platform for the machine learning lifecycle</li>\n</ul>\n<p>An open source platform for the end-to-end machine learning lifecycle</p>\n<p>cf. Esperanto : 국제적인 표준 언어<br>\ncf. 파이썬도 누구나 쉽게 사용하고자 만든 언어</p>\n<hr>\n<ul>\n<li>\n<p>번역을 할 때 번역 투가 많이 존재하는 책</p>\n<ol>\n<li>수동태</li>\n<li>문장의 주어를 넣은 문장들</li>\n</ol>\n</li>\n<li>\n<p>사람과 기계가 서로 소통하는 인터페이스</p>\n<ol>\n<li>키보드 &#x26; 마우스</li>\n<li>센서</li>\n<li>바코드 리더</li>\n<li>카메라</li>\n<li>터치</li>\n<li>음성 (srir, alexa, kakao, google home,..)</li>\n</ol>\n</li>\n</ul>\n<p>cf. 영화 <a href=\"https://search.naver.com/search.naver?where=nexearch&#x26;sm=top_sug.pre&#x26;fbm=1&#x26;acr=1&#x26;acq=%ED%94%84%EB%A1%9C%ED%8E%98%EC%84%9C+&#x26;qdt=0&#x26;ie=utf8&#x26;query=%ED%94%84%EB%A1%9C%ED%8E%98%EC%84%9C+%EC%95%A4+%EB%A7%A4%EB%93%9C%EB%A7%A8\">프로페서 앤 매드맨</a></p>\n<p>in 1956년 다트머스 회의,<br>\n에스페란토 어 : 각 언어에서 존재하는 예외 사항을 없애려고 노력</p>\n<p>cf. <a href=\"https://breakorean.kr\">https://breakorean.kr</a> => 속어, 은어<br>\nex. 중고나라, 게임기 분야에서 삼다수의 의미? = 3ds</p>\n<ul>\n<li>분야 별 자연어 처리 문제점\n<ul>\n<li>법조 관련 자연어 처리를 한다 -> 용어가 어렵다, 해당 지식 없으면 해석하기 어렵다</li>\n<li>특허쪽 관련 자연어 처리를 한다 -> 신기술에 대한 용어, 다루는 도메인이 너무 크다, 문서에 그림이 많다, 한 특허가 가진 문서의 페이지 수가 너무 다양하다</li>\n<li>의료 쪽 관련 자연어 처리를 한다 -> 용어가 어렵다, 해당 지식 없으면 해석하기 어렵다, 환자의 정보가 노출되면 안 된다, 동의 유무</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"5-정규식\" style=\"position:relative;\">(5) 정규식<a href=\"#5-%EC%A0%95%EA%B7%9C%EC%8B%9D\" aria-label=\"5 정규식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>regex = regular expression</p>\n<p>pdf나 work 문서에서 매주 월요일마다 700~1000건 유입.</p>\n<ol>\n<li>pdf에서 내용을 추출</li>\n<li>추출한 내용에서 특정 부분을 추출한다</li>\n</ol>\n<p>주민등록번호, 이메일 주소, 핸드폰 번호 등의 특정 패턴을 찾고자 할 때<br>\n=> regex 사용</p>\n<ol>\n<li>입력한 문자열 최소 8글자 이상인지 확인</li>\n<li>입력한 문자열 중에서 대문자가 최소 1글자 이상인지 확인</li>\n<li>입력한 문자열 중에서 소문자가 최소 1글자 이상인지 확인</li>\n<li>입력한 문자열 중에서 숫자가 최소 1글자 이상인지 확인</li>\n<li>입력한 문자열 중에서 특수문자가 최소 1글자 이상인지 확인</li>\n</ol>\n<p>cf. <a href=\"https://regexr.com/\">https://regexr.com/</a></p>\n<hr>\n<h4 id=\"6-정규식-python-예제\" style=\"position:relative;\">(6) 정규식 python 예제<a href=\"#6-%EC%A0%95%EA%B7%9C%EC%8B%9D-python-%EC%98%88%EC%A0%9C\" aria-label=\"6 정규식 python 예제 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>파이썬 내 re 패키지를 활용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\r\nre<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kafeiaselfabcalisjeflajslefj;abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 파이썬의 리스트 형태로</span>\r\n\r\niterator <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>finditer<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kafeiaselfabcalisjeflajslefj;abc\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['abc','abc']</span>\r\n\r\n<span class=\"token keyword\">for</span> match <span class=\"token keyword\">in</span> iterator<span class=\"token punctuation\">:</span>\r\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># abc</span>\r\n<span class=\"token comment\"># abc</span>\r\n\r\n<span class=\"token comment\"># [ ] : 일치 시키려는 문자 집합인 문자 클래스를 지정하는데 사용</span>\r\nre<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"askdfj;akdfj;lajdf;laj;lakdsfabcasdfaabcdadf\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['abc', 'abc']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>정규식은 oracle db에서 sql로만 해봤는데, 그래서 뭔가 익숙한 듯 아닌 듯 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"[abc]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"askdfj;akdfj;lajdf;laj;lakdsfabcasdfaabcdadf\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># - 로 문자 클래스의 범위를 지정할 수 있다.</span>\r\n\r\nre<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"[a-c]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"askdfj;akdfj;lajdf;laj;lakdsfabcasdfaabcdadf\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['a', 'a', 'a', 'a', 'a', 'a', 'b', 'c', 'a', 'a', 'a', 'b', 'c', 'a']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 퀴즈1 : 제시한 문자열에서 숫자들의 갯수</span>\r\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"[0-9]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"asdfjl;ajdf;la3534l2k3o;lkdagj;qi4touoq\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 7</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>파이썬에서 정말 많이 사용하는 데이터 구조 3형제\n<ul>\n<li>() : tuple, 변경 불가, pandas 나 numpy 에서 특정한 결과를 줄 때 튜플 형태로 결과를 알려준다</li>\n<li>{} : dictionary, key-value, json 포맷과 형태 비슷, json 형태를 웹에서 데이터를 가져오면, decode하면 바로 dictionary</li>\n<li>[] : list, 모든 것을 다 담을 수 있다, 길이도 가변적, 왠만한 경우 거의 리스트로 사용, 메모리 사용이 비효율적</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 퀴즈2 : 숫자가 4개 이어진 부분을 찾아주세요!</span>\r\nre<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"[0-9][0-9][0-9][0-9]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"asdfjl;ajdf;la3534l2k3o;lkdagj;qi4touoq\"</span><span class=\"token punctuation\">)</span>\r\n\r\ndocuments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asdfj;laieorkdjf;aliejr;akjdf23k4j;lajds;l'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string\">'asdfjoqweitulad;ai@weutadg;lajoetiuaodkgjier'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string\">'asdkfjqoitlskdnfoqwiekhas;ioew=adgoie'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string\">'askdfl_asdkfei_asdjkfla****askeasfff'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string\">'{{{{{asdfjowei@@##askdfoie}}}}}'</span><span class=\"token punctuation\">]</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">'[0-9:\"{}()@#&amp;]'</span>\r\n\r\n<span class=\"token keyword\">for</span> doc <span class=\"token keyword\">in</span> documents<span class=\"token punctuation\">:</span>\r\n   <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token keyword\">pass</span>\r\n   <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># asdkfjqoitlskdnfoqwiekhas;ioew=adgoie</span>\r\n<span class=\"token comment\"># askdfl_asdkfei_asdjkfla****askeasfff</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> [0-9]{4}로도 표현 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># ^ : 지정한 클래스에 해당되지 않는 것을 찾아라</span>\r\ndocuments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asdfj;laieorkdjf;aliejr;akjdf23k4j;lajds;l'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdfjoqweitulad;ai@weutadg;lajoetiuaodkgjier'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdkfjqoitlskdnfoqwiekhas;ioew=adgoie'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'askdfl_asdkfei_asdjkfla****askeasfff'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'{{{{{asdfjowei@@##askdfoie}}}}}'</span><span class=\"token punctuation\">]</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">'[0-9:\"{}()@#&amp;]'</span>\r\n\r\n<span class=\"token keyword\">for</span> doc <span class=\"token keyword\">in</span> documents<span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">pass</span>\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># asdkfjqoitlskdnfoqwiekhas;ioew=adgoie</span>\r\n<span class=\"token comment\"># askdfl_asdkfei_asdjkfla****askeasfff        </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 퀴즈3 : doc에서 모든 \\를 찾아보세요</span>\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">'\\n for new [line, ] \\section and \\document and \\\\\\section \\n'</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">\"[\\\\\\]\"</span> <span class=\"token comment\"># escape character 특수문자를 표시하기 일반적으로 \\를 추가</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 4</span>\r\n\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\\\section\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># # \\\\ => \\</span>\r\n\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">r'\\n for new [line, ] \\section and \\document and \\\\\\section \\n'</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># \\n for new [line, ] \\section and \\document and \\\\\\section \\n</span>\r\n\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 퀴즈 : \\ 랑 [랑 ] 랑 가진 부분을 찾아주세요</span>\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">r'\\n for new [line, ] \\section and \\document and \\\\\\section \\n'</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">\"[\\[\\]\\\\\\]\"</span> <span class=\"token comment\"># escape character 특수문자를 표시하기 일반적으로 \\를 추가</span>\r\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 9</span>\r\n\r\n<span class=\"token comment\"># \"[\\[\\]\\\\\\]\"</span>\r\n<span class=\"token comment\"># \"[   \\[   \\]   \\\\\\]\"</span>\r\n\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">r'\\n for new [line, ] \\section and \\document and \\\\\\section \\n'</span>\r\nregExp_brackets <span class=\"token operator\">=</span> <span class=\"token string\">\"[\\[\\]]\"</span>\r\nbrackets_count <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp_brackets<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\nregExp_Slash <span class=\"token operator\">=</span> <span class=\"token string\">\"[\\\\\\]\"</span>\r\nslash_count <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp_Slash<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>brackets_count <span class=\"token operator\">+</span> slash_count<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 9</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 퀴즈 : \\section 부분을 찾아주세요</span>\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">r'\\n for new [line, ] \\section and \\document and \\\\\\section \\n'</span>\r\nre<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\"[\\\\\\]section\"</span><span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['\\\\section', '\\\\section']</span>\r\n\r\n<span class=\"token comment\"># \\d : 모든 숫자, 0-9와 같다</span>\r\n<span class=\"token comment\"># \\D : [^0-9]</span>\r\n<span class=\"token comment\"># \\s : 모든 공백문자를 의미 [\\t\\n\\r\\f\\v]와 동일</span>\r\n<span class=\"token comment\"># \\S : [^\\t\\n\\r\\f\\v]</span>\r\n<span class=\"token comment\"># \\w : 모든 영문자 + 숫자 + underscore [a-zA-Z0-9_]와 동일</span>\r\n<span class=\"token comment\"># \\W : [^a-zA-Z0-9_]</span>\r\n\r\n<span class=\"token comment\"># ^ : 지정한 클래스에 해당되지 않는 것을 찾아라</span>\r\ndocuments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asdfj;laieorkdjf;aliejr;akjdf23k4j;lajds;l'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdfjoqweitulad;ai@weutadg;lajoetiuaodkgjier'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdkfjqoitlskdnfoqwiekhas;ioew=adgoie'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'askdfl_asdkfei_asdjkfla****askeasfff'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'{{{{{asdfjowei@@##askdfoie}}}}}'</span><span class=\"token punctuation\">]</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">'[\\s\\d_]'</span>\r\n\r\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> documents<span class=\"token punctuation\">:</span>\r\n    rs <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># ['2', '3', '4']</span>\r\n<span class=\"token comment\"># []</span>\r\n<span class=\"token comment\"># []</span>\r\n<span class=\"token comment\"># ['_', '_']</span>\r\n<span class=\"token comment\"># []   </span>\r\n\r\n<span class=\"token comment\"># * : * 앞에 있는 문자가 없거나 갯수 상관없이 찾는다</span>\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">\"YahooYahoooYahooooYahoooooYaho\"</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">\"Yahoo*\"</span>\r\nrs <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['Yahoo', 'Yahooo', 'Yahoooo', 'Yahooooo', 'Yaho']</span>\r\n\r\n<span class=\"token comment\"># ^ : 지정한 클래스에 해당되지 않는 것을 찾아라</span>\r\ndocuments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asdfj;laieorkdjf;aliejr;akjdf23k4j;lajds;l'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdfjoqweitulad;ai@weutadg;lajoetiuaodkgjier'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdkfjqoitlskdnfoqwiekhas;ioew=adgoie'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'askdfl_asdkfei_asdjkfla****askeasfff'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'{{{{{asdfjowei@@##askdfoie}}}}}'</span><span class=\"token punctuation\">]</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">'[\\w]*'</span>\r\n\r\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> documents<span class=\"token punctuation\">:</span>\r\n    rs <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># ['asdfj', '', 'laieorkdjf', '', 'aliejr', '', 'akjdf23k4j', '', 'lajds', '', 'l', '']</span>\r\n<span class=\"token comment\"># ['asdfjoqweitulad', '', 'ai', '', 'weutadg', '', 'lajoetiuaodkgjier', '']</span>\r\n<span class=\"token comment\"># ['asdkfjqoitlskdnfoqwiekhas', '', 'ioew', '', 'adgoie', '']</span>\r\n<span class=\"token comment\"># ['askdfl_asdkfei_asdjkfla', '', '', '', '', 'askeasfff', '']</span>\r\n<span class=\"token comment\"># ['', '', '', '', '', 'asdfjowei', '', '', '', '', 'askdfoie', '', '', '', '', '', '']     </span>\r\n\r\n<span class=\"token comment\"># + : *앞에 있는 문자가 최소 1개이상 갯수에 상관없이 형태를 유지하며 찾는다</span>\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">\"YahooYahoooYahooooYahoooooYaho\"</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">\"Yahoo+\"</span>\r\nrs <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['Yahoo', 'Yahooo', 'Yahoooo', 'Yahooooo']</span>\r\n\r\n<span class=\"token comment\"># ? : ? 뒤에 문자가 없거나 문자가 존재하는 것 계속 확인</span>\r\ndoc <span class=\"token operator\">=</span> <span class=\"token string\">\"YahooYahoooYahooooYahoooooYaho\"</span> <span class=\"token comment\"># Yahoo 라는 패턴이 있는 것 다 찾아달라</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">\"Yah?oo\"</span>\r\nrs <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['Yahoo', 'Yahoo', 'Yahoo', 'Yahoo']</span>\r\n\r\n<span class=\"token comment\"># {m,n}</span>\r\ndocuments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asdfj;laieorkdjf;aliejr;akjdf23k4j;lajds;l'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdfjoqweitulad;ai@weutadg;lajoetiuaodkgjier'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'asdkfjqoitlskdnfoqwiekhas;ioew=adgoie'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'askdfl_asdkfei_asdjkfla****askeasfff'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token string\">'{{{{{asdfjowei@@##askdfoie}}}}}'</span><span class=\"token punctuation\">]</span>\r\nregExp <span class=\"token operator\">=</span> <span class=\"token string\">'\\d{2}'</span> <span class=\"token comment\"># 숫자가 2개 이상</span>\r\n<span class=\"token comment\"># regExp = '\\d*' # {0,} = *, {1,} = +,{0,1} = ?</span>\r\n\r\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> documents<span class=\"token punctuation\">:</span>\r\n    rs <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ['23']</span>\r\n<span class=\"token comment\"># []</span>\r\n<span class=\"token comment\"># []</span>\r\n<span class=\"token comment\"># []</span>\r\n<span class=\"token comment\"># []</span>\r\n\r\n```﻿</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#2%EC%9D%BC%EC%B0%A8\">2일차</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EB%B3%B5%EC%8A%B5-%EC%98%88%EC%A0%9C\">(1) 복습 예제</a></p>\n</li>\n<li>\n<p><a href=\"#2-qr%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B8%B0--%EB%A6%AC%EB%8D%94%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\">(2) QR코드 생성기 &#x26; 리더기 프로그램</a></p>\n<ul>\n<li><a href=\"#cf-url-%EC%A4%84%EC%9D%B4%EB%8A%94-%EC%98%88%EC%A0%9C\">cf. url 줄이는 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C\">(3) 클라우드</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EC%9D%8C%EC%84%B1%EC%9D%B8%EC%8B%9D%EA%B3%BC-%ED%95%A9%EC%84%B1\">(4) 음성인식과 합성</a></p>\n</li>\n<li>\n<p><a href=\"#5-%EC%A0%95%EA%B7%9C%EC%8B%9D\">(5) 정규식</a></p>\n</li>\n<li>\n<p><a href=\"#6-%EC%A0%95%EA%B7%9C%EC%8B%9D-python-%EC%98%88%EC%A0%9C\">(6) 정규식 python 예제</a></p>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"AI 이노베이션 스퀘어 3기 언어반 2일차 후기"}}},"pageContext":{"slug":"/ai-이노베이션-스퀘어-언어-2일차/"}},"staticQueryHashes":["3159585216"]}