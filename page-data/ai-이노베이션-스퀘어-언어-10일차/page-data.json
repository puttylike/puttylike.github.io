{"componentChunkName":"component---src-templates-blog-post-js","path":"/ai-이노베이션-스퀘어-언어-10일차/","result":{"data":{"markdownRemark":{"html":"<p>간만의 tensorflow 입문. 이어서.<br>\n다음주엔 전이학습을 배울 듯 하다.<br>\n언제쯤 tf로 자연어 처리를 하려나...?</p>\n<hr>\n<h3 id=\"10일차\" style=\"position:relative;\">10일차<a href=\"#10%EC%9D%BC%EC%B0%A8\" aria-label=\"10일차 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>01_neural_network_regression2.ipynb</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\r\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\r\n\r\nX <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\r\nX\r\n\r\n<span class=\"token comment\"># array([-100,  -96,  -92,  -88,  -84,  -80,  -76,  -72,  -68,  -64,  -60,</span>\r\n<span class=\"token comment\">#         -56,  -52,  -48,  -44,  -40,  -36,  -32,  -28,  -24,  -20,  -16,</span>\r\n<span class=\"token comment\">#         -12,   -8,   -4,    0,    4,    8,   12,   16,   20,   24,   28,</span>\r\n<span class=\"token comment\">#          32,   36,   40,   44,   48,   52,   56,   60,   64,   68,   72,</span>\r\n<span class=\"token comment\">#          76,   80,   84,   88,   92,   96])</span>\r\n\r\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\r\ny\r\n\r\n<span class=\"token comment\"># array([-90, -86, -82, -78, -74, -70, -66, -62, -58, -54, -50, -46, -42,</span>\r\n<span class=\"token comment\">#        -38, -34, -30, -26, -22, -18, -14, -10,  -6,  -2,   2,   6,  10,</span>\r\n<span class=\"token comment\">#         14,  18,  22,  26,  30,  34,  38,  42,  46,  50,  54,  58,  62,</span>\r\n<span class=\"token comment\">#         66,  70,  74,  78,  82,  86,  90,  94,  98, 102, 106])</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> y = a*X + b 와 같이 X와 y 사이의 관계식을 찾으려 한다.</p>\n<p>전체 데이터를 학습 데이터 / 테스트 데이터로 나누기 (split)<br>\n머신러닝 프로젝트에서 가장 일반적이고 중요한 단계 중에 하나!<br>\n필요하다면 검증용 데이터도 필요!<br>\nTraining Set : 이 데이터로 모델이 학습, 일반적으로 전체 데이터 셋에서 약 70<del>80% 정도를 취한다. (학습)<br>\nValidation Set : 이 데이터로 학습 중인 모델을 검증, 일반적으로 약 10</del>15% 정도를 취한다. (모의고사)<br>\nTest Set : 이 데이터로 학습한 모델을 평가, 일반적으로 약 10~15%정도 취한다. (수능)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (50, 50)</span>\r\n\r\nX_train <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\r\ny_train <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\r\n\r\nX_test <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\ny_test <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (40, 10, 40, 10)</span>\r\n\r\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\r\n\r\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"Training data\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"Test data\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span> <span class=\"token comment\"># mean absolute error</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># short for stochastic gradient descent</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> fit까지 해야 summary를 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 3. 모델을 fit</span>\r\nmodel<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> verbose <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># verbose = 0를 붙이면 log?를 안 볼 수 있다.</span>\r\n\r\nmodel<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Model: \"sequential\"</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># Layer (type)                 Output Shape              Param #   </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># dense (Dense)                (None, 1)                 2         </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># Total params: 2</span>\r\n<span class=\"token comment\"># Trainable params: 2</span>\r\n<span class=\"token comment\"># Non-trainable params: 0</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">X_test\r\n<span class=\"token comment\"># array([60, 64, 68, 72, 76, 80, 84, 88, 92, 96])</span>\r\n\r\ny_preds <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\r\ny_preds<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_preds<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># (array([[ 77.15386 ],</span>\r\n<span class=\"token comment\">#         [ 82.12077 ],</span>\r\n<span class=\"token comment\">#         [ 87.087685],</span>\r\n<span class=\"token comment\">#         [ 92.054596],</span>\r\n<span class=\"token comment\">#         [ 97.02151 ],</span>\r\n<span class=\"token comment\">#         [101.98842 ],</span>\r\n<span class=\"token comment\">#         [106.95532 ],</span>\r\n<span class=\"token comment\">#         [111.92223 ],</span>\r\n<span class=\"token comment\">#         [116.889145],</span>\r\n<span class=\"token comment\">#         [121.85606 ]], dtype=float32),</span>\r\n<span class=\"token comment\">#  10)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">plot_predictions</span><span class=\"token punctuation\">(</span>train_data <span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">,</span> train_labels <span class=\"token operator\">=</span> y_train<span class=\"token punctuation\">,</span> test_data <span class=\"token operator\">=</span> X_test<span class=\"token punctuation\">,</span> test_labels <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> predictions <span class=\"token operator\">=</span> y_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Training data\"</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Test data\"</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Prediction data\"</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\nplot_predictions<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">,</span> y_preds<span class=\"token punctuation\">)</span>    </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> graph를 그리는 plot_predictions 함수를 만든다.</p>\n<p>예측 결과를 평가 (Evaluating predictions)<br>\n시각화와 병행해서, 평가 지표 (metrics)를 보여주는 것도 좋습니다.<br>\n우리가 해결하려는 문제 및 데이터 셋에 따라, 평가 지표는 각각 다르다.<br>\nregression 문제 해결 시 많이 사용하는 주요 지표 중에 2개 정도만 다룹니다.<br>\nMAE (Mean absolute error) : 예측값 간의 거리들의 평균을 구한다<br>\nMSE (Mean square error) : 예측값 간의 거리들의 평균을 제곱 (오차가 클수록 사용)<br>\n이 값들이 작으면 작을수록 좋다!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 모델 평가 (Evaluate)</span>\r\nmodel<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 반환값이 loss함수의 값, 그리고 지정한 metric의 계산값</span>\r\n\r\n<span class=\"token comment\"># 1/1 [==============================] - 0s 130ms/step - loss: 11.5050 - mae: 11.5050</span>\r\n<span class=\"token comment\"># [11.504960060119629, 11.504960060119629]</span>\r\n\r\nmae <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_absolute_error<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> y_pred <span class=\"token operator\">=</span> y_preds<span class=\"token punctuation\">)</span>\r\nmae\r\n\r\n<span class=\"token comment\"># &lt;tf.Tensor: shape=(10,), dtype=float32, numpy=</span>\r\n<span class=\"token comment\"># array([12.907682, 10.775846, 10.      , 10.410919, 12.008603, 14.793051,</span>\r\n<span class=\"token comment\">#        18.955322, 23.922234, 28.889145, 33.856056], dtype=float32)></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">y_test\r\n<span class=\"token comment\"># array([ 70,  74,  78,  82,  86,  90,  94,  98, 102, 106])</span>\r\n\r\ny_preds\r\n\r\n<span class=\"token comment\"># array([[ 77.15386 ],</span>\r\n<span class=\"token comment\">#        [ 82.12077 ],</span>\r\n<span class=\"token comment\">#        [ 87.087685],</span>\r\n<span class=\"token comment\">#        [ 92.054596],</span>\r\n<span class=\"token comment\">#        [ 97.02151 ],</span>\r\n<span class=\"token comment\">#        [101.98842 ],</span>\r\n<span class=\"token comment\">#        [106.95532 ],</span>\r\n<span class=\"token comment\">#        [111.92223 ],</span>\r\n<span class=\"token comment\">#        [116.889145],</span>\r\n<span class=\"token comment\">#        [121.85606 ]], dtype=float32)</span>\r\n\r\ny_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> y_preds<span class=\"token punctuation\">.</span>shape\r\n<span class=\"token comment\"># ((10,), (10, 1))</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 예측 값과 실제 값의 차이가 좀 있는 건, shape이 달라서였다.</p>\n<p>위의 사례와 같이 input shape와 output shape의 모양을 잘 다루는 것이 중요합니다.<br>\n이런 상황은 자주 발생합니다.<br>\ntensorflow를 이용해서 처리할 때 항상 두 텐서의 모양을 비교하는 것이 중요합니다.<br>\n입력과 출력 모양이 일치하지 않으면 원하는 결과를 얻기 힘듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">y_preds<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> y_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>shape\r\n<span class=\"token comment\"># ((10, 1), (10,))</span>\r\n\r\ny_test<span class=\"token punctuation\">,</span> y_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># (array([ 70,  74,  78,  82,  86,  90,  94,  98, 102, 106]),</span>\r\n<span class=\"token comment\">#  array([ 77.15386 ,  82.12077 ,  87.087685,  92.054596,  97.02151 ,</span>\r\n<span class=\"token comment\">#         101.98842 , 106.95532 , 111.92223 , 116.889145, 121.85606 ],</span>\r\n<span class=\"token comment\">#        dtype=float32))</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> squeeze로 변경하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">mae <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_absolute_error<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> y_pred <span class=\"token operator\">=</span> y_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nmae<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 11.50496</span>\r\n\r\nmse <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> y_pred <span class=\"token operator\">=</span> y_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nmse<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 140.07715</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>y_test <span class=\"token operator\">-</span> y_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 11.504959869384766</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> reduce_mean으로 했더니, model을 mae로 했어서 비슷하게 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">mae</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_absolute_error<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> y_pred <span class=\"token operator\">=</span> y_pred<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">mse</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> y_pred <span class=\"token operator\">=</span> y_pred<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 함수로 만든다.</p>\n<ol>\n<li>더 많은 데이터! ==> 데이터에 숨겨진 패턴을 찾을 기회가 더 많아진다.</li>\n<li>모델을 더 크고 정교하게 만든다 ==> 계층을 추가하거나 계층을 이루는 neuron을 더 추가</li>\n<li>더 많이 학습 ==> 데이터에 숨겨진 패턴을 찾을 기회가 더 많아진다.</li>\n</ol>\n<ul>\n<li>Test</li>\n</ul>\n<ol>\n<li>model_1 : 레이어를 1개로 하고 epoch를 200</li>\n<li>model_2 : 레이어를 2개로 하고 epoch를 200</li>\n<li>model_3 : 레이어를 2개로 하고 epoch를 500</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># model_1 build</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel1 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel1<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span> <span class=\"token comment\"># mean absolute error</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># short for stochastic gradient descent</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nmodel1<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> verbose <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\r\ny_preds_1 <span class=\"token operator\">=</span> model1<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\r\ny_preds_1\r\n\r\n<span class=\"token comment\"># array([[54.771538],</span>\r\n<span class=\"token comment\">#        [58.317333],</span>\r\n<span class=\"token comment\">#        [61.86313 ],</span>\r\n<span class=\"token comment\">#        [65.40893 ],</span>\r\n<span class=\"token comment\">#        [68.95472 ],</span>\r\n<span class=\"token comment\">#        [72.50052 ],</span>\r\n<span class=\"token comment\">#        [76.04631 ],</span>\r\n<span class=\"token comment\">#        [79.59211 ],</span>\r\n<span class=\"token comment\">#        [83.13791 ],</span>\r\n<span class=\"token comment\">#        [86.6837  ]], dtype=float32)</span>\r\n\r\nplot_predictions<span class=\"token punctuation\">(</span>predictions <span class=\"token operator\">=</span> y_preds_1<span class=\"token punctuation\">)</span>\r\n\r\nmae_1 <span class=\"token operator\">=</span> mae<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_preds_1<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nmse_1 <span class=\"token operator\">=</span> mse<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_preds_1<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nmae_1<span class=\"token punctuation\">,</span> mse_1\r\n<span class=\"token comment\"># (17.27238, 300.0371)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># model_2 build</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel2<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span> <span class=\"token comment\"># mean absolute error</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># short for stochastic gradient descent</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\nmodel2<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> verbose <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\r\ny_preds_2 <span class=\"token operator\">=</span> model2<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\r\ny_preds_2\r\n\r\n<span class=\"token comment\"># array([[59.024967],</span>\r\n<span class=\"token comment\">#        [62.744293],</span>\r\n<span class=\"token comment\">#        [66.46361 ],</span>\r\n<span class=\"token comment\">#        [70.18294 ],</span>\r\n<span class=\"token comment\">#        [73.90225 ],</span>\r\n<span class=\"token comment\">#        [77.62158 ],</span>\r\n<span class=\"token comment\">#        [81.340904],</span>\r\n<span class=\"token comment\">#        [85.06023 ],</span>\r\n<span class=\"token comment\">#        [88.77955 ],</span>\r\n<span class=\"token comment\">#        [92.49887 ]], dtype=float32)</span>\r\n\r\nplot_predictions<span class=\"token punctuation\">(</span>predictions <span class=\"token operator\">=</span> y_preds_2<span class=\"token punctuation\">)</span>\r\n\r\nmae_2 <span class=\"token operator\">=</span> mae<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_preds_2<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nmse_2 <span class=\"token operator\">=</span> mse<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_preds_2<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nmae_2<span class=\"token punctuation\">,</span> mse_2\r\n<span class=\"token comment\"># (12.238081, 150.42056)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># model_3 build</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel3 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel3<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span> <span class=\"token comment\"># mean absolute error</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># short for stochastic gradient descent</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\nmodel3<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> verbose <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\r\ny_preds_3 <span class=\"token operator\">=</span> model3<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\r\ny_preds_3\r\n\r\n<span class=\"token comment\"># array([[25.160711],</span>\r\n<span class=\"token comment\">#        [26.504711],</span>\r\n<span class=\"token comment\">#        [27.848711],</span>\r\n<span class=\"token comment\">#        [29.192713],</span>\r\n<span class=\"token comment\">#        [30.53671 ],</span>\r\n<span class=\"token comment\">#        [31.880713],</span>\r\n<span class=\"token comment\">#        [33.224712],</span>\r\n<span class=\"token comment\">#        [34.568714],</span>\r\n<span class=\"token comment\">#        [35.912712],</span>\r\n<span class=\"token comment\">#        [37.256714]], dtype=float32)</span>\r\n\r\nplot_predictions<span class=\"token punctuation\">(</span>predictions <span class=\"token operator\">=</span> y_preds_2<span class=\"token punctuation\">)</span>\r\n\r\nmae_3 <span class=\"token operator\">=</span> mae<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_preds_3<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nmse_3 <span class=\"token operator\">=</span> mse<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_preds_3<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nmae_3<span class=\"token punctuation\">,</span> mse_3\r\n\r\n<span class=\"token comment\"># (56.791283, 3283.4485)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>각 모델의 hypter parameter 수정, 즉 hyper parameter tuning을 했는데,<br>\n결국 단편적인 값의 상태... 지금까지 우리가 모델을 3개나 만들었는데,<br>\n이 모델의 지표들을 비교를 할 수 있어야 더 의미가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">model_results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"model1\"</span><span class=\"token punctuation\">,</span> mae_1<span class=\"token punctuation\">,</span> mse_1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"model2\"</span><span class=\"token punctuation\">,</span> mae_2<span class=\"token punctuation\">,</span> mse_2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"model3\"</span><span class=\"token punctuation\">,</span> mae_3<span class=\"token punctuation\">,</span> mse_3<span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">]</span>\r\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\r\nall_results <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>model_results<span class=\"token punctuation\">,</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mse\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\nall_results\r\n\r\n<span class=\"token comment\"># model\tmae\tmse</span>\r\n<span class=\"token comment\"># 0\tmodel1\t17.272381\t300.037109</span>\r\n<span class=\"token comment\"># 1\tmodel2\t12.238081\t150.420563</span>\r\n<span class=\"token comment\"># 2\tmodel3\t56.791283\t3283.448486</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>model2가 마음에 듭니다!<br>\n웹 어플리케이션이나 모바일 장비에서 사용 등등 서비스로 구현하기 위해 모델을 저장하고 싶습니다.</p>\n<p>Tensorflow에서 모델을 저장하는 방법 2가지</p>\n<ol>\n<li>SavedModel format (default)</li>\n<li>HDFS format</li>\n</ol>\n<p>위 2가지의 차이는 SavedModel이 모델을 다시 불러올 때 추가적인 작업 없이도 자동으로 관련 정보를 준비해 준다.<br>\n어떤 것을 사용하느냐는 상황에 맞춰 사용하면 되고, 대부분의 경우 SavedModel이면 충분!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 모델을 save</span>\r\nmodel2<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"best_model_SavedModel_Format\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 모델을 save-2</span>\r\nmodel2<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"best_model_SavedModel_Format.h5\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<ul>\n<li>01_neural_network_regression3.ipynb</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\r\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\r\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\r\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\r\n\r\nloaded_saved_model <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>load_model<span class=\"token punctuation\">(</span><span class=\"token string\">\"best_model_SavedModel_format\"</span><span class=\"token punctuation\">)</span>\r\n\r\nloaded_saved_model<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Model: \"sequential_5\"</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># Layer (type)                 Output Shape              Param #   </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># dense_6 (Dense)              (None, 1)                 2         </span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># dense_7 (Dense)              (None, 1)                 2         </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># Total params: 4</span>\r\n<span class=\"token comment\"># Trainable params: 4</span>\r\n<span class=\"token comment\"># Non-trainable params: 0</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">X <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\r\nX\r\n<span class=\"token comment\"># array([-100,  -96,  -92,  -88,  -84,  -80,  -76,  -72,  -68,  -64,  -60,</span>\r\n<span class=\"token comment\">#         -56,  -52,  -48,  -44,  -40,  -36,  -32,  -28,  -24,  -20,  -16,</span>\r\n<span class=\"token comment\">#         -12,   -8,   -4,    0,    4,    8,   12,   16,   20,   24,   28,</span>\r\n<span class=\"token comment\">#          32,   36,   40,   44,   48,   52,   56,   60,   64,   68,   72,</span>\r\n<span class=\"token comment\">#          76,   80,   84,   88,   92,   96])</span>\r\n\r\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\r\ny\r\n\r\n<span class=\"token comment\"># array([-90, -86, -82, -78, -74, -70, -66, -62, -58, -54, -50, -46, -42,</span>\r\n<span class=\"token comment\">#        -38, -34, -30, -26, -22, -18, -14, -10,  -6,  -2,   2,   6,  10,</span>\r\n<span class=\"token comment\">#         14,  18,  22,  26,  30,  34,  38,  42,  46,  50,  54,  58,  62,</span>\r\n<span class=\"token comment\">#         66,  70,  74,  78,  82,  86,  90,  94,  98, 102, 106])</span>\r\n\r\nX_train <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\r\ny_train <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\r\n\r\nX_test <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\ny_test <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (40, 10, 40, 10)</span>\r\n\r\nsaved_model_preds <span class=\"token operator\">=</span> loaded_saved_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">mae</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_absolute_error<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">mse</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span>\r\n\r\nmae<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> saved_model_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mse<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> saved_model_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (12.238081, 150.42056)</span>\r\n\r\nloaded_h5_model <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>load_model<span class=\"token punctuation\">(</span><span class=\"token string\">\"best_model_SavedModel_format.h5\"</span><span class=\"token punctuation\">)</span>\r\nloaded_h5_model<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Model: \"sequential_10\"</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># Layer (type)                 Output Shape              Param #   </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># dense_14 (Dense)             (None, 1)                 2         </span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\n<span class=\"token comment\"># dense_15 (Dense)             (None, 1)                 2         </span>\r\n<span class=\"token comment\"># =================================================================</span>\r\n<span class=\"token comment\"># Total params: 4</span>\r\n<span class=\"token comment\"># Trainable params: 4</span>\r\n<span class=\"token comment\"># Non-trainable params: 0</span>\r\n<span class=\"token comment\"># _________________________________________________________________</span>\r\nsaved_h5_preds <span class=\"token operator\">=</span> loaded_h5_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\r\n\r\nmae<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> saved_h5_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mse<span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> saved_h5_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (12.238081, 150.42056)  </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> model_2라 동일한 테스트를 했을 때 거의 같은 결과값이 나왔다. (12.238081, 150.420563)</p>\n<hr>\n<ul>\n<li>01_neural_network_regression4.ipynb</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\r\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\r\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\r\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">plot_predictions</span><span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> test_data<span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>train_data<span class=\"token punctuation\">,</span> train_labels<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Training data\"</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">,</span> test_labels<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Test data\"</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>test_data<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Prediction data\"</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mae</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_absolute_error<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> y_pred <span class=\"token operator\">=</span> y_pred<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mse</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>y_true <span class=\"token operator\">=</span> y_test<span class=\"token punctuation\">,</span> y_pred <span class=\"token operator\">=</span> y_pred<span class=\"token punctuation\">)</span>    </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>강사님께 insurance.csv 파일을 제공 받았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">insurance <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"insurance.csv\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>insurance<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># pandas.core.frame.DataFrame</span>\r\n\r\n<span class=\"token comment\"># insurance.head()</span>\r\n<span class=\"token comment\"># insurance.tail()</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>age, sex, bmi, children, smoker, region : feature<br>\ncharnges : label</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">!pip install sweetviz\r\n\r\n<span class=\"token keyword\">import</span> sweetviz <span class=\"token keyword\">as</span> sv\r\nmy_report <span class=\"token operator\">=</span> sv<span class=\"token punctuation\">.</span>analyze<span class=\"token punctuation\">(</span>insurance<span class=\"token punctuation\">)</span>\r\nmy_report<span class=\"token punctuation\">.</span>show_html<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> age, region은 관련 없어 보인다.</p>\n<ul>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html\">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># sex, smoker, region 는 분류형(Categorical) => numerical variables로 바꿔야 합니다!</span>\r\n<span class=\"token comment\"># one-hot encoding</span>\r\ninsurance_one_hot <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>get_dummies<span class=\"token punctuation\">(</span>insurance<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># insurance_one_hot.head()</span>\r\n<span class=\"token comment\"># insurance_one_hot.tail()</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> pd.get_dummies로 형변환을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># feature (X), label (y)로 insurance_one_hot를 분리</span>\r\nX <span class=\"token operator\">=</span> insurance_one_hot<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">\"charges\"</span><span class=\"token punctuation\">,</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\ny <span class=\"token operator\">=</span> insurance_one_hot<span class=\"token punctuation\">[</span><span class=\"token string\">\"charges\"</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># X.head()</span>\r\n<span class=\"token comment\"># y.head()</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (pandas.core.frame.DataFrame, pandas.core.series.Series)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> X, y로 데이터를 분리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">! pip install sklearn\r\n\r\n<span class=\"token comment\"># dataset 에서 feature 와 label을 구분!</span>\r\n<span class=\"token comment\"># 이제 training dataset 과 test dataset으로 구분! (split)</span>\r\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\r\nX_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> test_size <span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> random_state <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (1070, 268, 1070, 268)</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\ninsurance_model <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    \r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\ninsurance_model<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span> <span class=\"token comment\"># mean absolute error</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># short for stochastic gradient descent</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\ninsurance_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># , verbose = 0</span>\r\n\r\ninsurance_model<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 9/9 [==============================] - 0s 2ms/step - loss: 8628.2520 - mae: 8628.2520</span>\r\n<span class=\"token comment\"># [8628.251953125, 8628.251953125]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 오전에 만든 model_2를 썼는데, loss가 너무 크다.</p>\n<p>모델이 좋지 않다...</p>\n<ol>\n<li>레이어를 늘려볼까...</li>\n<li>레이어의 뉴런을 늘려볼까...</li>\n<li>optimizer를 바꿔볼까... (문제집을 바꿔볼까)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\ninsurance_model_2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    \r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 출력 (output shape가 1개!)     </span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\ninsurance_model_2<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span> <span class=\"token comment\"># mean absolute error</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 많은 문제들에 대해서 시작할 때 사용하기 좋은 optimizer입니다.</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory <span class=\"token operator\">=</span> insurance_model_2<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n\r\ninsurance_model_2<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 9/9 [==============================] - 0s 2ms/step - loss: 4924.5093 - mae: 4924.5093</span>\r\n<span class=\"token comment\"># [4924.50927734375, 4924.50927734375]</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># (dict, dict_keys(['loss', 'mae']))</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> loss가 반으로 줄어 들었다.</p>\n<ul>\n<li><a href=\"https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam\">https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"loss\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"epochs\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">history_2 <span class=\"token operator\">=</span> insurance_model_2<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\ninsurance_model_2<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 9/9 [==============================] - 0s 2ms/step - loss: 3495.8057 - mae: 3495.8057</span>\r\n<span class=\"token comment\"># [3495.8056640625, 3495.8056640625]</span>\r\n\r\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_2<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"loss\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"epochs\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 학습을 100번 더 시켰더니, loss가 조금 더 떨어졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">history_3 <span class=\"token operator\">=</span> insurance_model_2<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\ninsurance_model_2<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 9/9 [==============================] - 0s 2ms/step - loss: 3213.5044 - mae: 3213.5044</span>\r\n<span class=\"token comment\"># [3213.50439453125, 3213.50439453125]</span>\r\n\r\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>history_3<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"loss\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"epochs\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 학습을 100번 더 시켰으나, loss가 별로 안 떨어졌다.</p>\n<p>Preprocessing data (normalization 그리고 standardization)<br>\n기본 concept : 신경망 (neural network) 에 전달하는 data의 값을 0 ~ 1 사이로 맞춰준다!<br>\nnormalization : 원래 값들의 범위를 0 ~ 1 사이로 조정 / ex) 0 ~ 100,000 => 0 ~ 1<br>\nstandardization : 데이터를 평균이 0인 상태에서 분산으로 조정<br>\nComputer vision의 경우 : pixel의 값들이 일반적으로 0 ~ 255 의 값을 가진다  / ex) pixel_value / 255.</p>\n<ol>\n<li>처리할 데이터를 숫자로 바꾸어주는 효과 (신경망은 문자열을 다룰 수 없다)</li>\n<li>우리가 처리할 데이터가 적절한 형태를 가지고 있다는 것을 확인하는 과정 (input shape, output shape)</li>\n<li>feature scaling을 해주는 과정\n<ul>\n<li>normalization => min-max 간의 관계를 조정</li>\n<li>standardization => 평균이 0 분산이 1인 상태 기준으로 조정</li>\n</ul>\ncf. 일반적으로 신경망에서 normalization을 더 많이 사용합니다.</li>\n</ol>\n<p>insurance.csv를 다시 불러온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">insurance <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">\"insurance.csv\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>compose <span class=\"token keyword\">import</span> make_column_transformer\r\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> MinMaxScaler<span class=\"token punctuation\">,</span> OneHotEncoder\r\n\r\nct <span class=\"token operator\">=</span> make_column_transformer<span class=\"token punctuation\">(</span>\r\n    <span class=\"token punctuation\">(</span>MinMaxScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bmi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"children\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 현재 숫자로 되어 있는 값들을 0 ~ 1로 조정해 주겠다</span>\r\n    <span class=\"token punctuation\">(</span>OneHotEncoder<span class=\"token punctuation\">(</span>handle_unknown<span class=\"token operator\">=</span><span class=\"token string\">\"ignore\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"smoker\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"region\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># sklearn.compose._column_transformer.ColumnTransformer</span>\r\n\r\nX <span class=\"token operator\">=</span> insurance<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">\"charges\"</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\ny <span class=\"token operator\">=</span> insurance<span class=\"token punctuation\">[</span><span class=\"token string\">\"charges\"</span><span class=\"token punctuation\">]</span>\r\n\r\nX_train<span class=\"token punctuation\">,</span> X_test<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> y_test <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> test_size <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> random_state <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\nct<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># ColumnTransformer(transformers=[('minmaxscaler', MinMaxScaler(),</span>\r\n<span class=\"token comment\">#                                  ['age', 'bmi', 'children']),</span>\r\n<span class=\"token comment\">#                                 ('onehotencoder',</span>\r\n<span class=\"token comment\">#                                  OneHotEncoder(handle_unknown='ignore'),</span>\r\n<span class=\"token comment\">#                                  ['sex', 'smoker', 'region'])])</span>\r\n\r\nX_train_normal <span class=\"token operator\">=</span> ct<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span>\r\nX_test <span class=\"token operator\">=</span> ct<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> ct로 fit하고 transform하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>X_train_normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> X_train_normal\r\n\r\n<span class=\"token comment\"># (numpy.ndarray,</span>\r\n<span class=\"token comment\">#  array([[0.60869565, 0.10734463, 0.4       , ..., 1.        , 0.        ,</span>\r\n<span class=\"token comment\">#          0.        ],</span>\r\n<span class=\"token comment\">#         [0.63043478, 0.22491256, 0.        , ..., 0.        , 0.        ,</span>\r\n<span class=\"token comment\">#          0.        ],</span>\r\n<span class=\"token comment\">#         [0.73913043, 0.23944041, 0.        , ..., 0.        , 1.        ,</span>\r\n<span class=\"token comment\">#          0.        ],</span>\r\n<span class=\"token comment\">#         ...,</span>\r\n<span class=\"token comment\">#         [0.86956522, 0.24791499, 0.        , ..., 0.        , 0.        ,</span>\r\n<span class=\"token comment\">#          0.        ],</span>\r\n<span class=\"token comment\">#         [0.41304348, 0.85122411, 0.4       , ..., 0.        , 0.        ,</span>\r\n<span class=\"token comment\">#          1.        ],</span>\r\n<span class=\"token comment\">#         [0.80434783, 0.37503363, 0.        , ..., 0.        , 0.        ,</span>\r\n<span class=\"token comment\">#          1.        ]]))</span>\r\n\r\nX_train<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token comment\"># age                19</span>\r\n<span class=\"token comment\"># sex            female</span>\r\n<span class=\"token comment\"># bmi              27.9</span>\r\n<span class=\"token comment\"># children            0</span>\r\n<span class=\"token comment\"># smoker            yes</span>\r\n<span class=\"token comment\"># region      southwest</span>\r\n<span class=\"token comment\"># Name: 0, dtype: object</span>\r\n\r\nX_train_normal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token comment\"># array([0.60869565, 0.10734463, 0.4       , 1.        , 0.        ,</span>\r\n<span class=\"token comment\">#        1.        , 0.        , 0.        , 1.        , 0.        ,</span>\r\n<span class=\"token comment\">#        0.        ])</span>\r\n\r\nX_train_normal<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> X_train<span class=\"token punctuation\">.</span>shape\r\n<span class=\"token comment\"># ((1070, 11), (1070, 6))</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 성별 같은 남/여로 된 게 쪼개지다보니 더 늘었다.</p>\n<p>이제 우리는 데이터를 가지고 와서<br>\ntraining set과 test set으로 나누고, 문자열 데이터를 숫자로도 바꾸고, normalization 까지 완료!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\ninsurance_model_3 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    \r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 출력 (output shape가 1개!)     </span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\ninsurance_model_3<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span> <span class=\"token comment\"># mean absolute error</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 많은 문제들에 대해서 시작할 때 사용하기 좋은 optimizer입니다.</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_3 <span class=\"token operator\">=</span> insurance_model_3<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train_normal<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\r\n\r\ninsurance_model_3<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">,</span> y_test<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 9/9 [==============================] - 0s 1ms/step - loss: 3171.5774 - mae: 3171.5774</span>\r\n<span class=\"token comment\"># [3171.577392578125, 3171.577392578125]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> loss가 이전보다 조금 더 줄어 들었다.</p>\n<hr>\n<h2 id=\"classification\" style=\"position:relative;\">Classification<a href=\"#classification\" aria-label=\"classification permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>02_neural_network_classification.ipynb</li>\n</ul>\n<p>regression => 결과가 어떤 값으로 귀결한다는 쪽<br>\nclassification => 어떤 편인지 판별하는 과정<br>\nbinary classification : 둘 중에 하나 선택!<br>\nmulti-class classification : 3개 이상의 선택지가 있을 때!<br>\nmulti-label classification : 어떤 신문기사 하나가 정치 쪽일 수도 있고, 경제 쪽일 수도 있고</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\r\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\r\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\r\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\r\n\r\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_circles\r\n\r\nn_samples <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\r\nX<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_circles<span class=\"token punctuation\">(</span>n_samples<span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">0.03</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>shape\r\n<span class=\"token comment\"># (numpy.ndarray, (1000, 2), numpy.ndarray, (1000,))</span>\r\n\r\nX<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># array([[ 0.75424625,  0.23148074],</span>\r\n<span class=\"token comment\">#        [-0.75615888,  0.15325888],</span>\r\n<span class=\"token comment\">#        [-0.81539193,  0.17328203],</span>\r\n<span class=\"token comment\">#        [-0.39373073,  0.69288277],</span>\r\n<span class=\"token comment\">#        [ 0.44220765, -0.89672343],</span>\r\n<span class=\"token comment\">#        [-0.47964637,  0.67643477],</span>\r\n<span class=\"token comment\">#        [-0.01364836,  0.80334872],</span>\r\n<span class=\"token comment\">#        [ 0.77151327,  0.14775959],</span>\r\n<span class=\"token comment\">#        [-0.16932234, -0.79345575],</span>\r\n<span class=\"token comment\">#        [-0.1214858 ,  1.02150905],</span>\r\n<span class=\"token comment\">#        [-0.64249042, -0.54409929],</span>\r\n<span class=\"token comment\">#        [ 0.5694666 ,  0.84476776],</span>\r\n<span class=\"token comment\">#        [-0.11773591,  0.83140071],</span>\r\n<span class=\"token comment\">#        [ 0.73410004, -0.33316553],</span>\r\n<span class=\"token comment\">#        [ 0.60077633, -0.58742632],</span>\r\n<span class=\"token comment\">#        [ 0.19022571, -0.76341003],</span>\r\n<span class=\"token comment\">#        [-0.93695185, -0.3434314 ],</span>\r\n<span class=\"token comment\">#        [ 0.1070617 , -0.7930922 ],</span>\r\n<span class=\"token comment\">#        [-0.81891362, -0.10162399],</span>\r\n<span class=\"token comment\">#        [-0.64210013, -0.74537441],</span>\r\n<span class=\"token comment\">#        [ 0.6268272 ,  0.45004698],</span>\r\n<span class=\"token comment\">#        [-0.56229136,  0.85375906],</span>\r\n<span class=\"token comment\">#        [-0.02126666, -0.99627531],</span>\r\n<span class=\"token comment\">#        [ 0.73977058,  0.27837025],</span>\r\n<span class=\"token comment\">#        [-0.90904839,  0.45724363],</span>\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\">#        [-0.90904839,  0.45724363],</span>\r\n<span class=\"token comment\">#        [-0.93699411,  0.19944235],</span>\r\n<span class=\"token comment\">#        [ 0.28661578,  0.97973871],</span>\r\n<span class=\"token comment\">#        [ 0.82626072, -0.15335757],</span>\r\n<span class=\"token comment\">#        [ 0.2534334 , -0.7709718 ],</span>\r\n<span class=\"token comment\">#        [ 0.65794626, -0.46508097]])</span>\r\n\r\ny<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># array([1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0,</span>\r\n<span class=\"token comment\">#        0, 1, 0, 0, 0, 1, 1, 1], dtype=int64)</span>\r\n\r\n\r\ncircles <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token string\">\"X0\"</span><span class=\"token punctuation\">:</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">\"X1\"</span><span class=\"token punctuation\">:</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">\"label\"</span><span class=\"token punctuation\">:</span>y\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\ncircles<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># X0\tX1\tlabel</span>\r\n<span class=\"token comment\"># 0\t0.754246\t0.231481\t1</span>\r\n<span class=\"token comment\"># 1\t-0.756159\t0.153259\t1</span>\r\n<span class=\"token comment\"># 2\t-0.815392\t0.173282\t1</span>\r\n<span class=\"token comment\"># 3\t-0.393731\t0.692883\t1</span>\r\n<span class=\"token comment\"># 4\t0.442208\t-0.896723\t0</span>\r\n\r\ncircles<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 1    500</span>\r\n<span class=\"token comment\"># 0    500</span>\r\n<span class=\"token comment\"># Name: label, dtype: int64</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 결과를 볼 때 우리는 binary classification 을 해결해야 한다!<br>\n0과 1 만이 아니라 2, 3, 4, 등등이 존재하면 multiclass classification 입니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>RdYlBu<span class=\"token punctuation\">)</span>\r\n\r\nX<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>shape\r\n<span class=\"token comment\"># ((1000, 2), (1000,))</span>\r\n\r\nX<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token comment\"># (array([0.75424625, 0.23148074]), 1)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>우리가 만들 신경망은 2개 값을 가진 최소한 1차원 텐서이어야 하고,<br>\n최소한 1개 값을 가진 tensor로 결과 값을 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 1. model creation</span>\r\n<span class=\"token comment\"># 2. model compile</span>\r\n<span class=\"token comment\"># 3. model fit</span>\r\n\r\n<span class=\"token comment\"># model_1 build</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_1 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel_1<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>BinaryCrossentropy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># short for stochastic gradient descent</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nmodel_1<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># Epoch 1/5</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 1s 4ms/step - loss: 2.8544 - accuracy: 0.4600</span>\r\n<span class=\"token comment\"># Epoch 2/5</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 4ms/step - loss: 0.7131 - accuracy: 0.5430</span>\r\n<span class=\"token comment\"># Epoch 3/5</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 4ms/step - loss: 0.6973 - accuracy: 0.5090</span>\r\n<span class=\"token comment\"># Epoch 4/5</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 4ms/step - loss: 0.6950 - accuracy: 0.5010</span>\r\n<span class=\"token comment\"># Epoch 5/5</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 3ms/step - loss: 0.6942 - accuracy: 0.4820</span>\r\n<span class=\"token comment\"># &lt;keras.callbacks.History at 0x1ee2cd8bfd0></span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> accuracy가 다소 낮다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">model_1<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 2ms/step - loss: 0.6943 - accuracy: 0.4830</span>\r\n<span class=\"token comment\"># Epoch 199/200</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 2ms/step - loss: 0.6937 - accuracy: 0.5120</span>\r\n<span class=\"token comment\"># Epoch 200/200</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 2ms/step - loss: 0.6941 - accuracy: 0.4810</span>\r\n<span class=\"token comment\"># &lt;keras.callbacks.History at 0x1ee2e16deb0></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> accuracy가 유사하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">model_1<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 1ms/step - loss: 0.6935 - accuracy: 0.5000</span>\r\n<span class=\"token comment\"># [0.6934831142425537, 0.5]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>=> evaluate해도 마찬가지.. 모델을 새로 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_2 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel_2<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>BinaryCrossentropy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># short for stochastic gradient descent</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_2 <span class=\"token operator\">=</span> model_2<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 2ms/step - loss: 0.6938 - accuracy: 0.5000</span>\r\n<span class=\"token comment\"># Epoch 99/100</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 2ms/step - loss: 0.6943 - accuracy: 0.4980</span>\r\n<span class=\"token comment\"># Epoch 100/100</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 3ms/step - loss: 0.6941 - accuracy: 0.4690</span>\r\n\r\nmodel_2<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 1ms/step - loss: 0.6933 - accuracy: 0.5000</span>\r\n<span class=\"token comment\"># [0.6933314204216003, 0.5]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> layer를 늘려도 그냥저냥이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_3 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel_3<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>BinaryCrossentropy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_3 <span class=\"token operator\">=</span> model_3<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 3ms/step - loss: 0.6989 - accuracy: 0.4800</span>\r\n<span class=\"token comment\"># Epoch 99/100</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 3ms/step - loss: 0.6976 - accuracy: 0.5090</span>\r\n<span class=\"token comment\"># Epoch 100/100</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 3ms/step - loss: 0.6966 - accuracy: 0.4870</span>\r\n\r\nmodel_3<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 2ms/step - loss: 0.6980 - accuracy: 0.5080</span>\r\n<span class=\"token comment\"># [0.6980255246162415, 0.5080000162124634]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> Adam도 그냥저냥이고..</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">plot_decision_boundary</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    x_min<span class=\"token punctuation\">,</span> x_max <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span>\r\n    y_min<span class=\"token punctuation\">,</span> y_max <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span>\r\n    xx<span class=\"token punctuation\">,</span> yy <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>meshgrid<span class=\"token punctuation\">(</span>\r\n                            np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>x_min<span class=\"token punctuation\">,</span> x_max<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n                            np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>y_min<span class=\"token punctuation\">,</span> y_max<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n                        <span class=\"token punctuation\">)</span>\r\n    x_in <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>c_<span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n    y_pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x_in<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doing multiclass classification\"</span><span class=\"token punctuation\">)</span>\r\n        y_pred <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doing binary classification\"</span><span class=\"token punctuation\">)</span>\r\n        y_pred <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>    \r\n    plt<span class=\"token punctuation\">.</span>contourf<span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>RdYlBu<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>plt<span class=\"token punctuation\">.</span>cm<span class=\"token punctuation\">.</span>RdYlBu<span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> xx<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    plt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_3<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>    </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 빨간색 원과 파란색 원을 구분하기 위한 동그라미  boundary 그래프가 나와야 하는데, linear 선형 그래프가 나왔다.</p>\n<p>우리의 데이터는 직선으로 구분할 수 없는 데이터인데...<br>\n현재 모델이 가진 기준선은 직선으로 되어 있다...</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\nX_regression <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\ny_regression <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n\r\nX_reg_train <span class=\"token operator\">=</span> X_regression<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">150</span><span class=\"token punctuation\">]</span>\r\nX_reg_test <span class=\"token operator\">=</span> X_regression<span class=\"token punctuation\">[</span><span class=\"token number\">150</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\ny_reg_train <span class=\"token operator\">=</span> y_regression<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">150</span><span class=\"token punctuation\">]</span>\r\ny_reg_test <span class=\"token operator\">=</span> y_regression<span class=\"token punctuation\">[</span><span class=\"token number\">150</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\n\r\ntf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_4 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel_4<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>mae<span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mae\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_4 <span class=\"token operator\">=</span> model_4<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_reg_train<span class=\"token punctuation\">,</span> y_reg_train<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># show more (open the raw output data in a text editor) ...</span>\r\n<span class=\"token comment\">#</span>\r\n<span class=\"token comment\"># 5/5 [==============================] - 0s 2ms/step - loss: 39.0081 - mae: 39.0081</span>\r\n<span class=\"token comment\"># Epoch 99/100</span>\r\n<span class=\"token comment\"># 5/5 [==============================] - 0s 2ms/step - loss: 38.3056 - mae: 38.3056</span>\r\n<span class=\"token comment\"># Epoch 100/100</span>\r\n<span class=\"token comment\"># 5/5 [==============================] - 0s 3ms/step - loss: 37.9976 - mae: 37.9976</span>\r\n\r\ny_reg_preds <span class=\"token operator\">=</span> model_4<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>y_reg_test<span class=\"token punctuation\">)</span>\r\n\r\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X_reg_train<span class=\"token punctuation\">,</span> y_reg_train<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Training data\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X_reg_test<span class=\"token punctuation\">,</span> y_reg_test<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Testing data\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X_reg_test<span class=\"token punctuation\">,</span> y_reg_preds<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> <span class=\"token string\">\"Predictions\"</span><span class=\"token punctuation\">)</span>\r\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_5 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel_5<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>binary_crossentropy<span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_5 <span class=\"token operator\">=</span> model_5<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_5<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> model_5도 아직 선형인 점이 동일하다. 별 차이가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_6 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\n\r\nmodel_6<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>binary_crossentropy<span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_6 <span class=\"token operator\">=</span> model_6<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_6<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> 어째 더 이상해졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_7 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_7<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>binary_crossentropy<span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_7 <span class=\"token operator\">=</span> model_7<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_7<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\r\n\r\nmodel_7<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 2ms/step - loss: 7.7125 - accuracy: 0.5000</span>\r\n<span class=\"token comment\"># [7.712474346160889, 0.5]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> layer을 하나 더 추가했더니, 선이 하나 더 생겼다. loss도 줄었고..</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">tf<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>set_seed<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 1. 모델을 create</span>\r\nmodel_8 <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>activations<span class=\"token punctuation\">.</span>sigmoid<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 2. 모델을 compile</span>\r\nmodel_8<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\r\n    loss <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>losses<span class=\"token punctuation\">.</span>binary_crossentropy<span class=\"token punctuation\">,</span>\r\n    optimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>optimizers<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    metrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\nhistory_model_8 <span class=\"token operator\">=</span> model_8<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> epochs <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\r\n\r\nmodel_8<span class=\"token punctuation\">.</span>evaluate<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 32/32 [==============================] - 0s 1ms/step - loss: 0.2948 - accuracy: 0.9910</span>\r\n<span class=\"token comment\"># [0.2948004901409149, 0.9909999966621399]</span>\r\n\r\nplot_decision_boundary<span class=\"token punctuation\">(</span>model_8<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>=> sigmoid를 추가했더니, loss가 줄어들면서 빨간색 점과 파란색 점을 구분하는 원이 생성되었다.</p>\n<hr>\n<h3 id=\"function\" style=\"position:relative;\">function<a href=\"#function\" aria-label=\"function permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">A <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\r\nA\r\n<span class=\"token comment\"># &lt;tf.Tensor: shape=(20,), dtype=float32, numpy=</span>\r\n<span class=\"token comment\"># array([-10.,  -9.,  -8.,  -7.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,</span>\r\n<span class=\"token comment\">#          1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],</span>\r\n<span class=\"token comment\">#       dtype=float32)></span>\r\n\r\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">sigmoid</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> tf<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\nsigmoid<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># &lt;tf.Tensor: shape=(20,), dtype=float32, numpy=</span>\r\n<span class=\"token comment\"># array([4.5397872e-05, 1.2339458e-04, 3.3535014e-04, 9.1105117e-04,</span>\r\n<span class=\"token comment\">#        2.4726233e-03, 6.6928510e-03, 1.7986210e-02, 4.7425874e-02,</span>\r\n<span class=\"token comment\">#        1.1920292e-01, 2.6894143e-01, 5.0000000e-01, 7.3105860e-01,</span>\r\n<span class=\"token comment\">#        8.8079703e-01, 9.5257413e-01, 9.8201376e-01, 9.9330717e-01,</span>\r\n<span class=\"token comment\">#        9.9752742e-01, 9.9908900e-01, 9.9966466e-01, 9.9987662e-01],</span>\r\n<span class=\"token comment\">#       dtype=float32)>    </span>\r\n\r\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>sigmoid<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">relu</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> tf<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\r\n\r\nrelu<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># &lt;tf.Tensor: shape=(11,), dtype=float32, numpy=array([0., 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.], dtype=float32)></span>\r\n\r\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>relu<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"#10%EC%9D%BC%EC%B0%A8\">10일차</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#classification\">Classification</a></p>\n<ul>\n<li><a href=\"#function\">function</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"AI 이노베이션 스퀘어 3기 언어반 10일차 후기"}}},"pageContext":{"slug":"/ai-이노베이션-스퀘어-언어-10일차/"}},"staticQueryHashes":["3159585216"]}